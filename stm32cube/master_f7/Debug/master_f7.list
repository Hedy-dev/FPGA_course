
master_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800256c  0800256c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002574  08002574  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800257c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  0800258c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800258c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1c6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0002b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002450a  00000000  00000000  0002ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b521  00000000  00000000  00052302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e8f  00000000  00000000  0005d823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f6b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012b0  00000000  00000000  0013f708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004d10  00000000  00000000  001409b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800253c 	.word	0x0800253c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800253c 	.word	0x0800253c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000504:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	2400      	movs	r4, #0
 8000508:	9407      	str	r4, [sp, #28]
 800050a:	9408      	str	r4, [sp, #32]
 800050c:	9409      	str	r4, [sp, #36]	; 0x24
 800050e:	940a      	str	r4, [sp, #40]	; 0x28
 8000510:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b63      	ldr	r3, [pc, #396]	; (80006a0 <MX_GPIO_Init+0x1a0>)
 8000514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000516:	f042 0204 	orr.w	r2, r2, #4
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
 800051c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051e:	f002 0204 	and.w	r2, r2, #4
 8000522:	9201      	str	r2, [sp, #4]
 8000524:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
 800052e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000530:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000534:	9202      	str	r2, [sp, #8]
 8000536:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053a:	f042 0201 	orr.w	r2, r2, #1
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
 8000540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000542:	f002 0201 	and.w	r2, r2, #1
 8000546:	9203      	str	r2, [sp, #12]
 8000548:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054c:	f042 0202 	orr.w	r2, r2, #2
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	f002 0202 	and.w	r2, r2, #2
 8000558:	9204      	str	r2, [sp, #16]
 800055a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055e:	f042 0208 	orr.w	r2, r2, #8
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
 8000564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000566:	f002 0208 	and.w	r2, r2, #8
 800056a:	9205      	str	r2, [sp, #20]
 800056c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800056e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800057c:	9306      	str	r3, [sp, #24]
 800057e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000580:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80006b0 <MX_GPIO_Init+0x1b0>
 8000584:	4622      	mov	r2, r4
 8000586:	f244 0181 	movw	r1, #16513	; 0x4081
 800058a:	4650      	mov	r0, sl
 800058c:	f000 fbe0 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000590:	4f44      	ldr	r7, [pc, #272]	; (80006a4 <MX_GPIO_Init+0x1a4>)
 8000592:	4622      	mov	r2, r4
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4638      	mov	r0, r7
 8000598:	f000 fbda 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800059c:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 80005a0:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a4:	4b40      	ldr	r3, [pc, #256]	; (80006a8 <MX_GPIO_Init+0x1a8>)
 80005a6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80006b4 <MX_GPIO_Init+0x1b4>
 80005ae:	a907      	add	r1, sp, #28
 80005b0:	4648      	mov	r0, r9
 80005b2:	f000 fadd 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005b6:	2332      	movs	r3, #50	; 0x32
 80005b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2602      	movs	r6, #2
 80005bc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c0:	2503      	movs	r5, #3
 80005c2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005c4:	f04f 080b 	mov.w	r8, #11
 80005c8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	a907      	add	r1, sp, #28
 80005ce:	4648      	mov	r0, r9
 80005d0:	f000 face 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005d4:	2386      	movs	r3, #134	; 0x86
 80005d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005de:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 80005e6:	a907      	add	r1, sp, #28
 80005e8:	4648      	mov	r0, r9
 80005ea:	f000 fac1 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80005f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	a907      	add	r1, sp, #28
 80005fe:	4650      	mov	r0, sl
 8000600:	f000 fab6 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000604:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800060e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000612:	a907      	add	r1, sp, #28
 8000614:	4650      	mov	r0, sl
 8000616:	f000 faab 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800061a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800061e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000624:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000626:	2307      	movs	r3, #7
 8000628:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	a907      	add	r1, sp, #28
 800062c:	481f      	ldr	r0, [pc, #124]	; (80006ac <MX_GPIO_Init+0x1ac>)
 800062e:	f000 fa9f 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800063e:	a907      	add	r1, sp, #28
 8000640:	4638      	mov	r0, r7
 8000642:	f000 fa95 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800064e:	a907      	add	r1, sp, #28
 8000650:	4638      	mov	r0, r7
 8000652:	f000 fa8d 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000656:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800065a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000662:	230a      	movs	r3, #10
 8000664:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	a907      	add	r1, sp, #28
 8000668:	4648      	mov	r0, r9
 800066a:	f000 fa81 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000678:	a907      	add	r1, sp, #28
 800067a:	4648      	mov	r0, r9
 800067c:	f000 fa78 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000680:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000684:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800068c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000690:	a907      	add	r1, sp, #28
 8000692:	4638      	mov	r0, r7
 8000694:	f000 fa6c 	bl	8000b70 <HAL_GPIO_Init>

}
 8000698:	b00d      	add	sp, #52	; 0x34
 800069a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40021800 	.word	0x40021800
 80006a8:	10110000 	.word	0x10110000
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40020400 	.word	0x40020400
 80006b4:	40020800 	.word	0x40020800

080006b8 <HAL_UART_RxCpltCallback>:
{
	if (huart->Instance == USART1)
	{
		int a = 0;
	}
}
 80006b8:	4770      	bx	lr

080006ba <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x2>
	...

080006c0 <MX_USART2_UART_Init>:
{
 80006c0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x34>)
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x38>)
 80006c6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80006c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80006cc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	2100      	movs	r1, #0
 80006d0:	6081      	str	r1, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d2:	60c1      	str	r1, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d4:	6101      	str	r1, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d6:	230c      	movs	r3, #12
 80006d8:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	6181      	str	r1, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	61c1      	str	r1, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	6201      	str	r1, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	6241      	str	r1, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006e2:	460b      	mov	r3, r1
 80006e4:	460a      	mov	r2, r1
 80006e6:	f001 febb 	bl	8002460 <HAL_RS485Ex_Init>
 80006ea:	b900      	cbnz	r0, 80006ee <MX_USART2_UART_Init+0x2e>
}
 80006ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006ee:	f7ff ffe4 	bl	80006ba <Error_Handler>
 80006f2:	bf00      	nop
 80006f4:	20000030 	.word	0x20000030
 80006f8:	40004400 	.word	0x40004400

080006fc <SystemClock_Config>:
{
 80006fc:	b500      	push	{lr}
 80006fe:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000700:	2230      	movs	r2, #48	; 0x30
 8000702:	2100      	movs	r1, #0
 8000704:	a828      	add	r0, sp, #160	; 0xa0
 8000706:	f001 ff11 	bl	800252c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	2100      	movs	r1, #0
 800070c:	9123      	str	r1, [sp, #140]	; 0x8c
 800070e:	9124      	str	r1, [sp, #144]	; 0x90
 8000710:	9125      	str	r1, [sp, #148]	; 0x94
 8000712:	9126      	str	r1, [sp, #152]	; 0x98
 8000714:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000716:	2284      	movs	r2, #132	; 0x84
 8000718:	a802      	add	r0, sp, #8
 800071a:	f001 ff07 	bl	800252c <memset>
  HAL_PWR_EnableBkUpAccess();
 800071e:	f000 fb1d 	bl	8000d5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xbc>)
 8000724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000726:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800072a:	641a      	str	r2, [r3, #64]	; 0x40
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xc0>)
 8000738:	6813      	ldr	r3, [r2, #0]
 800073a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	6813      	ldr	r3, [r2, #0]
 8000746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000752:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000756:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000760:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000762:	2204      	movs	r2, #4
 8000764:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000766:	2248      	movs	r2, #72	; 0x48
 8000768:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800076c:	2303      	movs	r3, #3
 800076e:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	a828      	add	r0, sp, #160	; 0xa0
 8000772:	f000 fafb 	bl	8000d6c <HAL_RCC_OscConfig>
 8000776:	b9c0      	cbnz	r0, 80007aa <SystemClock_Config+0xae>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2102      	movs	r1, #2
 800077e:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000788:	9226      	str	r2, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078c:	a823      	add	r0, sp, #140	; 0x8c
 800078e:	f000 fd6d 	bl	800126c <HAL_RCC_ClockConfig>
 8000792:	b960      	cbnz	r0, 80007ae <SystemClock_Config+0xb2>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079c:	a802      	add	r0, sp, #8
 800079e:	f000 fe41 	bl	8001424 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	b930      	cbnz	r0, 80007b2 <SystemClock_Config+0xb6>
}
 80007a4:	b035      	add	sp, #212	; 0xd4
 80007a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007aa:	f7ff ff86 	bl	80006ba <Error_Handler>
    Error_Handler();
 80007ae:	f7ff ff84 	bl	80006ba <Error_Handler>
    Error_Handler();
 80007b2:	f7ff ff82 	bl	80006ba <Error_Handler>
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <main>:
{
 80007c0:	b508      	push	{r3, lr}
  HAL_Init();
 80007c2:	f000 f8f1 	bl	80009a8 <HAL_Init>
  SystemClock_Config();
 80007c6:	f7ff ff99 	bl	80006fc <SystemClock_Config>
  MX_GPIO_Init();
 80007ca:	f7ff fe99 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ce:	f7ff ff77 	bl	80006c0 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rx_buffer[0], 1);
 80007d2:	4c06      	ldr	r4, [pc, #24]	; (80007ec <main+0x2c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	4906      	ldr	r1, [pc, #24]	; (80007f0 <main+0x30>)
 80007d8:	4620      	mov	r0, r4
 80007da:	f001 fe1b 	bl	8002414 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, &tx_buffer[0], 1, 100);
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2201      	movs	r2, #1
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <main+0x34>)
 80007e4:	4620      	mov	r0, r4
 80007e6:	f001 fd2c 	bl	8002242 <HAL_UART_Transmit>
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x2a>
 80007ec:	20000030 	.word	0x20000030
 80007f0:	2000002c 	.word	0x2000002c
 80007f4:	20000000 	.word	0x20000000

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_MspInit+0x2c>)
 80007fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000802:	641a      	str	r2, [r3, #64]	; 0x40
 8000804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000806:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000814:	645a      	str	r2, [r3, #68]	; 0x44
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	b002      	add	sp, #8
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	2300      	movs	r3, #0
 800082e:	9303      	str	r3, [sp, #12]
 8000830:	9304      	str	r3, [sp, #16]
 8000832:	9305      	str	r3, [sp, #20]
 8000834:	9306      	str	r3, [sp, #24]
 8000836:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000838:	6802      	ldr	r2, [r0, #0]
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <HAL_UART_MspInit+0x98>)
 800083c:	429a      	cmp	r2, r3
 800083e:	d001      	beq.n	8000844 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000840:	b009      	add	sp, #36	; 0x24
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000844:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
 8000850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000852:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000856:	9200      	str	r2, [sp, #0]
 8000858:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
 8000862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000864:	f002 0201 	and.w	r2, r2, #1
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800086c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086e:	f042 0208 	orr.w	r2, r2, #8
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800087e:	2308      	movs	r3, #8
 8000880:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2702      	movs	r7, #2
 8000884:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2400      	movs	r4, #0
 8000888:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2603      	movs	r6, #3
 800088c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2507      	movs	r5, #7
 8000890:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	a903      	add	r1, sp, #12
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <HAL_UART_MspInit+0x9c>)
 8000896:	f000 f96b 	bl	8000b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800089a:	2330      	movs	r3, #48	; 0x30
 800089c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a6:	a903      	add	r1, sp, #12
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <HAL_UART_MspInit+0xa0>)
 80008aa:	f000 f961 	bl	8000b70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ae:	4622      	mov	r2, r4
 80008b0:	4621      	mov	r1, r4
 80008b2:	2026      	movs	r0, #38	; 0x26
 80008b4:	f000 f8a8 	bl	8000a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008b8:	2026      	movs	r0, #38	; 0x26
 80008ba:	f000 f8d7 	bl	8000a6c <HAL_NVIC_EnableIRQ>
}
 80008be:	e7bf      	b.n	8000840 <HAL_UART_MspInit+0x18>
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020c00 	.word	0x40020c00

080008cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler>

080008ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler>

080008d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler>

080008d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler>

080008d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler>

080008d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 f86f 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bd08      	pop	{r3, pc}

080008e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <USART2_IRQHandler+0xc>)
 80008e8:	f001 f8a4 	bl	8001a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ec:	bd08      	pop	{r3, pc}
 80008ee:	bf00      	nop
 80008f0:	20000030 	.word	0x20000030

080008f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <SystemInit+0x10>)
 80008f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80008fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090e:	490e      	ldr	r1, [pc, #56]	; (8000948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000924:	4c0b      	ldr	r4, [pc, #44]	; (8000954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000932:	f7ff ffdf 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 fdd5 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff ff41 	bl	80007c0 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000940:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800094c:	0800257c 	.word	0x0800257c
  ldr r2, =_sbss
 8000950:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000954:	200000bc 	.word	0x200000bc

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_InitTick+0x40>)
 8000962:	7818      	ldrb	r0, [r3, #0]
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	fbb3 f3f0 	udiv	r3, r3, r0
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_InitTick+0x44>)
 800096e:	6810      	ldr	r0, [r2, #0]
 8000970:	fbb0 f0f3 	udiv	r0, r0, r3
 8000974:	f000 f888 	bl	8000a88 <HAL_SYSTICK_Config>
 8000978:	b968      	cbnz	r0, 8000996 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	2c0f      	cmp	r4, #15
 800097c:	d901      	bls.n	8000982 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800097e:	2001      	movs	r0, #1
 8000980:	e00a      	b.n	8000998 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000982:	2200      	movs	r2, #0
 8000984:	4621      	mov	r1, r4
 8000986:	f04f 30ff 	mov.w	r0, #4294967295
 800098a:	f000 f83d 	bl	8000a08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_InitTick+0x48>)
 8000990:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2000      	movs	r0, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000996:	2001      	movs	r0, #1
}
 8000998:	bd10      	pop	{r4, pc}
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004
 80009a4:	2000000c 	.word	0x2000000c

080009a8 <HAL_Init>:
{
 80009a8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f81a 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ffd3 	bl	800095c <HAL_InitTick>
  HAL_MspInit();
 80009b6:	f7ff ff1f 	bl	80007f8 <HAL_MspInit>
}
 80009ba:	2000      	movs	r0, #0
 80009bc:	bd08      	pop	{r3, pc}
	...

080009c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_IncTick+0x10>)
 80009c2:	6811      	ldr	r1, [r2, #0]
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_IncTick+0x14>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	440b      	add	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <HAL_GetTick+0x8>)
 80009da:	6818      	ldr	r0, [r3, #0]
}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009e6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	0200      	lsls	r0, r0, #8
 80009f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009f8:	4a02      	ldr	r2, [pc, #8]	; (8000a04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009fa:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009fc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0000 	.word	0x05fa0000

08000a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a08:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_NVIC_SetPriority+0x58>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a12:	f1c3 0407 	rsb	r4, r3, #7
 8000a16:	2c04      	cmp	r4, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1c:	1d1d      	adds	r5, r3, #4
 8000a1e:	2d06      	cmp	r5, #6
 8000a20:	d914      	bls.n	8000a4c <HAL_NVIC_SetPriority+0x44>
 8000a22:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 35ff 	mov.w	r5, #4294967295
 8000a28:	fa05 f404 	lsl.w	r4, r5, r4
 8000a2c:	ea21 0104 	bic.w	r1, r1, r4
 8000a30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a32:	fa05 f303 	lsl.w	r3, r5, r3
 8000a36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db07      	blt.n	8000a50 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	0109      	lsls	r1, r1, #4
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_NVIC_SetPriority+0x5c>)
 8000a46:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a48:	bc30      	pop	{r4, r5}
 8000a4a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7e9      	b.n	8000a24 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	f000 000f 	and.w	r0, r0, #15
 8000a54:	0109      	lsls	r1, r1, #4
 8000a56:	b2c9      	uxtb	r1, r1
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_NVIC_SetPriority+0x60>)
 8000a5a:	5419      	strb	r1, [r3, r0]
 8000a5c:	e7f4      	b.n	8000a48 <HAL_NVIC_SetPriority+0x40>
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	e000e400 	.word	0xe000e400
 8000a68:	e000ed14 	.word	0xe000ed14

08000a6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	db07      	blt.n	8000a80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a70:	f000 021f 	and.w	r2, r0, #31
 8000a74:	0940      	lsrs	r0, r0, #5
 8000a76:	2301      	movs	r3, #1
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	4a02      	ldr	r2, [pc, #8]	; (8000a84 <HAL_NVIC_EnableIRQ+0x18>)
 8000a7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	3801      	subs	r0, #1
 8000a8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8e:	d20a      	bcs.n	8000aa6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_SYSTICK_Config+0x24>)
 8000a92:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_SYSTICK_Config+0x28>)
 8000a96:	21f0      	movs	r1, #240	; 0xf0
 8000a98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ab8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000aba:	f7ff ff8d 	bl	80009d8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000abe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d006      	beq.n	8000ad6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000acc:	2300      	movs	r3, #0
 8000ace:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
  }
  return HAL_OK;
}
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ad8:	6822      	ldr	r2, [r4, #0]
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	f023 0316 	bic.w	r3, r3, #22
 8000ae0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	6953      	ldr	r3, [r2, #20]
 8000ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aea:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aee:	b1e3      	cbz	r3, 8000b2a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0308 	bic.w	r3, r3, #8
 8000af8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	f023 0301 	bic.w	r3, r3, #1
 8000b02:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f013 0f01 	tst.w	r3, #1
 8000b0c:	d011      	beq.n	8000b32 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b0e:	f7ff ff63 	bl	80009d8 <HAL_GetTick>
 8000b12:	1b43      	subs	r3, r0, r5
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d9f5      	bls.n	8000b04 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b22:	2003      	movs	r0, #3
 8000b24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8000b28:	e7d4      	b.n	8000ad4 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1df      	bne.n	8000af0 <HAL_DMA_Abort+0x3c>
 8000b30:	e7e3      	b.n	8000afa <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b34:	233f      	movs	r3, #63	; 0x3f
 8000b36:	4093      	lsls	r3, r2
 8000b38:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b46:	e7c5      	b.n	8000ad4 <HAL_DMA_Abort+0x20>

08000b48 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b48:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d003      	beq.n	8000b5a <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
 8000b58:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b60:	6802      	ldr	r2, [r0, #0]
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000b6a:	2000      	movs	r0, #0
}
 8000b6c:	4770      	bx	lr
	...

08000b70 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	f200 80e3 	bhi.w	8000d3e <HAL_GPIO_Init+0x1ce>
{
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	e039      	b.n	8000bf2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b7e:	2209      	movs	r2, #9
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000b82:	2200      	movs	r2, #0
 8000b84:	40b2      	lsls	r2, r6
 8000b86:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b88:	3402      	adds	r4, #2
 8000b8a:	4e6d      	ldr	r6, [pc, #436]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000b8c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b90:	4a6c      	ldr	r2, [pc, #432]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000b92:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	43ea      	mvns	r2, r5
 8000b96:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9a:	684f      	ldr	r7, [r1, #4]
 8000b9c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ba0:	d001      	beq.n	8000ba6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ba2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000ba6:	4c67      	ldr	r4, [pc, #412]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000ba8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000baa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	684f      	ldr	r7, [r1, #4]
 8000bb2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000bb6:	d001      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000bb8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bbc:	4c61      	ldr	r4, [pc, #388]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bbe:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	684f      	ldr	r7, [r1, #4]
 8000bc8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bcc:	d001      	beq.n	8000bd2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000bce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000bd2:	4c5c      	ldr	r4, [pc, #368]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bd4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000bd6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bda:	684e      	ldr	r6, [r1, #4]
 8000bdc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000be0:	d001      	beq.n	8000be6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000be2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000be6:	4c57      	ldr	r4, [pc, #348]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000be8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bea:	3301      	adds	r3, #1
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	f200 80a4 	bhi.w	8000d3a <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	680c      	ldr	r4, [r1, #0]
 8000bf8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000bfc:	ea32 0404 	bics.w	r4, r2, r4
 8000c00:	d1f3      	bne.n	8000bea <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c02:	684c      	ldr	r4, [r1, #4]
 8000c04:	1e66      	subs	r6, r4, #1
 8000c06:	2c11      	cmp	r4, #17
 8000c08:	bf18      	it	ne
 8000c0a:	2e01      	cmpne	r6, #1
 8000c0c:	d901      	bls.n	8000c12 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0e:	2c12      	cmp	r4, #18
 8000c10:	d112      	bne.n	8000c38 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000c12:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c14:	005f      	lsls	r7, r3, #1
 8000c16:	2403      	movs	r4, #3
 8000c18:	40bc      	lsls	r4, r7
 8000c1a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c1e:	68cc      	ldr	r4, [r1, #12]
 8000c20:	40bc      	lsls	r4, r7
 8000c22:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c24:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c26:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c2c:	684c      	ldr	r4, [r1, #4]
 8000c2e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c32:	409a      	lsls	r2, r3
 8000c34:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000c36:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c38:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c3a:	005e      	lsls	r6, r3, #1
 8000c3c:	2403      	movs	r4, #3
 8000c3e:	40b4      	lsls	r4, r6
 8000c40:	43e2      	mvns	r2, r4
 8000c42:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c46:	688c      	ldr	r4, [r1, #8]
 8000c48:	40b4      	lsls	r4, r6
 8000c4a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000c4c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	684c      	ldr	r4, [r1, #4]
 8000c50:	2c12      	cmp	r4, #18
 8000c52:	bf18      	it	ne
 8000c54:	2c02      	cmpne	r4, #2
 8000c56:	d113      	bne.n	8000c80 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000c58:	08df      	lsrs	r7, r3, #3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c60:	f003 0407 	and.w	r4, r3, #7
 8000c64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000c68:	240f      	movs	r4, #15
 8000c6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c6e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c72:	690c      	ldr	r4, [r1, #16]
 8000c74:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c78:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c7c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000c80:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c82:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c84:	684a      	ldr	r2, [r1, #4]
 8000c86:	f002 0203 	and.w	r2, r2, #3
 8000c8a:	40b2      	lsls	r2, r6
 8000c8c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c90:	684a      	ldr	r2, [r1, #4]
 8000c92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c96:	d0a8      	beq.n	8000bea <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c98:	4a2b      	ldr	r2, [pc, #172]	; (8000d48 <HAL_GPIO_Init+0x1d8>)
 8000c9a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c9c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ca0:	6454      	str	r4, [r2, #68]	; 0x44
 8000ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ca4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cac:	089c      	lsrs	r4, r3, #2
 8000cae:	1ca6      	adds	r6, r4, #2
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000cb2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	0096      	lsls	r6, r2, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	40b2      	lsls	r2, r6
 8000cc0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_GPIO_Init+0x1dc>)
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f43f af5b 	beq.w	8000b82 <HAL_GPIO_Init+0x12>
 8000ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d022      	beq.n	8000d1a <HAL_GPIO_Init+0x1aa>
 8000cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	d020      	beq.n	8000d1e <HAL_GPIO_Init+0x1ae>
 8000cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d01e      	beq.n	8000d22 <HAL_GPIO_Init+0x1b2>
 8000ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d01c      	beq.n	8000d26 <HAL_GPIO_Init+0x1b6>
 8000cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d01a      	beq.n	8000d2a <HAL_GPIO_Init+0x1ba>
 8000cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d018      	beq.n	8000d2e <HAL_GPIO_Init+0x1be>
 8000cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d016      	beq.n	8000d32 <HAL_GPIO_Init+0x1c2>
 8000d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d014      	beq.n	8000d36 <HAL_GPIO_Init+0x1c6>
 8000d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f43f af34 	beq.w	8000b7e <HAL_GPIO_Init+0xe>
 8000d16:	220a      	movs	r2, #10
 8000d18:	e734      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	e732      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1e:	2202      	movs	r2, #2
 8000d20:	e730      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d22:	2203      	movs	r2, #3
 8000d24:	e72e      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d26:	2204      	movs	r2, #4
 8000d28:	e72c      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	e72a      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2e:	2206      	movs	r2, #6
 8000d30:	e728      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d32:	2207      	movs	r2, #7
 8000d34:	e726      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d36:	2208      	movs	r2, #8
 8000d38:	e724      	b.n	8000b84 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d3a:	b003      	add	sp, #12
 8000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3e:	4770      	bx	lr
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40013c00 	.word	0x40013c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d50:	b10a      	cbz	r2, 8000d56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	6181      	str	r1, [r0, #24]
 8000d54:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	6181      	str	r1, [r0, #24]
  }
}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	4770      	bx	lr
 8000d68:	40007000 	.word	0x40007000

08000d6c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	f000 81ff 	beq.w	8001170 <HAL_RCC_OscConfig+0x404>
{
 8000d72:	b570      	push	{r4, r5, r6, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	f013 0f01 	tst.w	r3, #1
 8000d7e:	d029      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d80:	4ba7      	ldr	r3, [pc, #668]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d01a      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d8c:	4ba4      	ldr	r3, [pc, #656]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d00f      	beq.n	8000db8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9e:	d040      	beq.n	8000e22 <HAL_RCC_OscConfig+0xb6>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d154      	bne.n	8000e4e <HAL_RCC_OscConfig+0xe2>
 8000da4:	4b9e      	ldr	r3, [pc, #632]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e039      	b.n	8000e2c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db8:	4b99      	ldr	r3, [pc, #612]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000dc0:	d0ea      	beq.n	8000d98 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4b97      	ldr	r3, [pc, #604]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dca:	d003      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x68>
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 81d0 	beq.w	8001174 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	f013 0f02 	tst.w	r3, #2
 8000dda:	d074      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ddc:	4b90      	ldr	r3, [pc, #576]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f013 0f0c 	tst.w	r3, #12
 8000de4:	d05e      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000de6:	4b8e      	ldr	r3, [pc, #568]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d053      	beq.n	8000e9a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8089 	beq.w	8000f0c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dfa:	4a89      	ldr	r2, [pc, #548]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000dfc:	6813      	ldr	r3, [r2, #0]
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e04:	f7ff fde8 	bl	80009d8 <HAL_GetTick>
 8000e08:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	4b85      	ldr	r3, [pc, #532]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f013 0f02 	tst.w	r3, #2
 8000e12:	d172      	bne.n	8000efa <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fde0 	bl	80009d8 <HAL_GetTick>
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f5      	bls.n	8000e0a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000e1e:	2003      	movs	r0, #3
 8000e20:	e1ad      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e22:	4a7f      	ldr	r2, [pc, #508]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e24:	6813      	ldr	r3, [r2, #0]
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	b32b      	cbz	r3, 8000e7c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000e30:	f7ff fdd2 	bl	80009d8 <HAL_GetTick>
 8000e34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	4b7a      	ldr	r3, [pc, #488]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e3e:	d1c9      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fdca 	bl	80009d8 <HAL_GetTick>
 8000e44:	1b40      	subs	r0, r0, r5
 8000e46:	2864      	cmp	r0, #100	; 0x64
 8000e48:	d9f5      	bls.n	8000e36 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e197      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e52:	d009      	beq.n	8000e68 <HAL_RCC_OscConfig+0xfc>
 8000e54:	4b72      	ldr	r3, [pc, #456]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e7e1      	b.n	8000e2c <HAL_RCC_OscConfig+0xc0>
 8000e68:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e7d7      	b.n	8000e2c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fdac 	bl	80009d8 <HAL_GetTick>
 8000e80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e8a:	d0a3      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fda4 	bl	80009d8 <HAL_GetTick>
 8000e90:	1b40      	subs	r0, r0, r5
 8000e92:	2864      	cmp	r0, #100	; 0x64
 8000e94:	d9f5      	bls.n	8000e82 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e171      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e9a:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ea2:	d1a6      	bne.n	8000df2 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f013 0f02 	tst.w	r3, #2
 8000eac:	d003      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x14a>
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f040 8161 	bne.w	8001178 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	4a5a      	ldr	r2, [pc, #360]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000eb8:	6813      	ldr	r3, [r2, #0]
 8000eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ebe:	6921      	ldr	r1, [r4, #16]
 8000ec0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	f013 0f08 	tst.w	r3, #8
 8000ecc:	d046      	beq.n	8000f5c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ece:	6963      	ldr	r3, [r4, #20]
 8000ed0:	b383      	cbz	r3, 8000f34 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed2:	4a53      	ldr	r2, [pc, #332]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000ed4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000edc:	f7ff fd7c 	bl	80009d8 <HAL_GetTick>
 8000ee0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ee6:	f013 0f02 	tst.w	r3, #2
 8000eea:	d137      	bne.n	8000f5c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fd74 	bl	80009d8 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9f5      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e141      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efa:	4a49      	ldr	r2, [pc, #292]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000efc:	6813      	ldr	r3, [r2, #0]
 8000efe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f02:	6921      	ldr	r1, [r4, #16]
 8000f04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e7dc      	b.n	8000ec6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000f0c:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f16:	f7ff fd5f 	bl	80009d8 <HAL_GetTick>
 8000f1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f013 0f02 	tst.w	r3, #2
 8000f24:	d0cf      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fd57 	bl	80009d8 <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f5      	bls.n	8000f1c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e124      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f34:	4a3a      	ldr	r2, [pc, #232]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f36:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fd4b 	bl	80009d8 <HAL_GetTick>
 8000f42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f48:	f013 0f02 	tst.w	r3, #2
 8000f4c:	d006      	beq.n	8000f5c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fd43 	bl	80009d8 <HAL_GetTick>
 8000f52:	1b40      	subs	r0, r0, r5
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9f5      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
 8000f5a:	e110      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f013 0f04 	tst.w	r3, #4
 8000f62:	d07d      	beq.n	8001060 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f82:	2501      	movs	r5, #1
 8000f84:	e000      	b.n	8000f88 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000f86:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_RCC_OscConfig+0x2b8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f90:	d00e      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f92:	68a3      	ldr	r3, [r4, #8]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d01f      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x26c>
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d135      	bne.n	8001008 <HAL_RCC_OscConfig+0x29c>
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	671a      	str	r2, [r3, #112]	; 0x70
 8000fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fa8:	f022 0204 	bic.w	r2, r2, #4
 8000fac:	671a      	str	r2, [r3, #112]	; 0x70
 8000fae:	e018      	b.n	8000fe2 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <HAL_RCC_OscConfig+0x2b8>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000fba:	f7ff fd0d 	bl	80009d8 <HAL_GetTick>
 8000fbe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_RCC_OscConfig+0x2b8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fc8:	d1e3      	bne.n	8000f92 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fca:	f7ff fd05 	bl	80009d8 <HAL_GetTick>
 8000fce:	1b80      	subs	r0, r0, r6
 8000fd0:	2864      	cmp	r0, #100	; 0x64
 8000fd2:	d9f5      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	e0d2      	b.n	800117e <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000fda:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fe2:	68a3      	ldr	r3, [r4, #8]
 8000fe4:	b353      	cbz	r3, 800103c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fcf7 	bl	80009d8 <HAL_GetTick>
 8000fea:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 8000fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff0:	f013 0f02 	tst.w	r3, #2
 8000ff4:	d133      	bne.n	800105e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fcef 	bl	80009d8 <HAL_GetTick>
 8000ffa:	1b80      	subs	r0, r0, r6
 8000ffc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001000:	4298      	cmp	r0, r3
 8001002:	d9f3      	bls.n	8000fec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e0ba      	b.n	800117e <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	2b05      	cmp	r3, #5
 800100a:	d00d      	beq.n	8001028 <HAL_RCC_OscConfig+0x2bc>
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_RCC_OscConfig+0x2b4>)
 800100e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	671a      	str	r2, [r3, #112]	; 0x70
 8001016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001018:	f022 0204 	bic.w	r2, r2, #4
 800101c:	671a      	str	r2, [r3, #112]	; 0x70
 800101e:	e7e0      	b.n	8000fe2 <HAL_RCC_OscConfig+0x276>
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_RCC_OscConfig+0x430>)
 800102a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800102c:	f042 0204 	orr.w	r2, r2, #4
 8001030:	671a      	str	r2, [r3, #112]	; 0x70
 8001032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	671a      	str	r2, [r3, #112]	; 0x70
 800103a:	e7d2      	b.n	8000fe2 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff fccc 	bl	80009d8 <HAL_GetTick>
 8001040:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <HAL_RCC_OscConfig+0x430>)
 8001044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001046:	f013 0f02 	tst.w	r3, #2
 800104a:	d008      	beq.n	800105e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff fcc4 	bl	80009d8 <HAL_GetTick>
 8001050:	1b80      	subs	r0, r0, r6
 8001052:	f241 3388 	movw	r3, #5000	; 0x1388
 8001056:	4298      	cmp	r0, r3
 8001058:	d9f3      	bls.n	8001042 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800105a:	2003      	movs	r0, #3
 800105c:	e08f      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800105e:	b9fd      	cbnz	r5, 80010a0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001060:	69a3      	ldr	r3, [r4, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 808a 	beq.w	800117c <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001068:	4a4c      	ldr	r2, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x430>)
 800106a:	6892      	ldr	r2, [r2, #8]
 800106c:	f002 020c 	and.w	r2, r2, #12
 8001070:	2a08      	cmp	r2, #8
 8001072:	d058      	beq.n	8001126 <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001074:	2b02      	cmp	r3, #2
 8001076:	d019      	beq.n	80010ac <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_RCC_OscConfig+0x430>)
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fca9 	bl	80009d8 <HAL_GetTick>
 8001086:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001088:	4b44      	ldr	r3, [pc, #272]	; (800119c <HAL_RCC_OscConfig+0x430>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001090:	d047      	beq.n	8001122 <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001092:	f7ff fca1 	bl	80009d8 <HAL_GetTick>
 8001096:	1b00      	subs	r0, r0, r4
 8001098:	2802      	cmp	r0, #2
 800109a:	d9f5      	bls.n	8001088 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800109c:	2003      	movs	r0, #3
 800109e:	e06e      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a0:	4a3e      	ldr	r2, [pc, #248]	; (800119c <HAL_RCC_OscConfig+0x430>)
 80010a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	e7d9      	b.n	8001060 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80010ac:	4a3b      	ldr	r2, [pc, #236]	; (800119c <HAL_RCC_OscConfig+0x430>)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc8f 	bl	80009d8 <HAL_GetTick>
 80010ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010bc:	4b37      	ldr	r3, [pc, #220]	; (800119c <HAL_RCC_OscConfig+0x430>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010c4:	d006      	beq.n	80010d4 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff fc87 	bl	80009d8 <HAL_GetTick>
 80010ca:	1b40      	subs	r0, r0, r5
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9f5      	bls.n	80010bc <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e054      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d4:	69e3      	ldr	r3, [r4, #28]
 80010d6:	6a22      	ldr	r2, [r4, #32]
 80010d8:	4313      	orrs	r3, r2
 80010da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010e2:	0852      	lsrs	r2, r2, #1
 80010e4:	3a01      	subs	r2, #1
 80010e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010f4:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_RCC_OscConfig+0x430>)
 80010f6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001100:	f7ff fc6a 	bl	80009d8 <HAL_GetTick>
 8001104:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_RCC_OscConfig+0x430>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001110:	f7ff fc62 	bl	80009d8 <HAL_GetTick>
 8001114:	1b00      	subs	r0, r0, r4
 8001116:	2802      	cmp	r0, #2
 8001118:	d9f5      	bls.n	8001106 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800111a:	2003      	movs	r0, #3
 800111c:	e02f      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800111e:	2000      	movs	r0, #0
 8001120:	e02d      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 8001122:	2000      	movs	r0, #0
 8001124:	e02b      	b.n	800117e <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x430>)
 8001128:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800112a:	2b01      	cmp	r3, #1
 800112c:	d029      	beq.n	8001182 <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001132:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001134:	428b      	cmp	r3, r1
 8001136:	d126      	bne.n	8001186 <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001138:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800113c:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	428b      	cmp	r3, r1
 8001140:	d123      	bne.n	800118a <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001142:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001148:	4013      	ands	r3, r2
 800114a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800114e:	d11e      	bne.n	800118e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001150:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800115a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800115e:	d118      	bne.n	8001192 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001160:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001166:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800116a:	d114      	bne.n	8001196 <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
 800116e:	e006      	b.n	800117e <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
}
 8001172:	4770      	bx	lr
        return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
 8001176:	e002      	b.n	800117e <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 800117c:	2000      	movs	r0, #0
}
 800117e:	b002      	add	sp, #8
 8001180:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001182:	2001      	movs	r0, #1
 8001184:	e7fb      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 8001186:	2001      	movs	r0, #1
 8001188:	e7f9      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 800118a:	2001      	movs	r0, #1
 800118c:	e7f7      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 800118e:	2001      	movs	r0, #1
 8001190:	e7f5      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 8001192:	2001      	movs	r0, #1
 8001194:	e7f3      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 8001196:	2001      	movs	r0, #1
 8001198:	e7f1      	b.n	800117e <HAL_RCC_OscConfig+0x412>
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d053      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0xb6>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d153      	bne.n	800125a <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011c0:	d028      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011ca:	0158      	lsls	r0, r3, #5
 80011cc:	2100      	movs	r1, #0
 80011ce:	1ac0      	subs	r0, r0, r3
 80011d0:	f161 0100 	sbc.w	r1, r1, #0
 80011d4:	018e      	lsls	r6, r1, #6
 80011d6:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 80011da:	0187      	lsls	r7, r0, #6
 80011dc:	1a3c      	subs	r4, r7, r0
 80011de:	eb66 0501 	sbc.w	r5, r6, r1
 80011e2:	00e9      	lsls	r1, r5, #3
 80011e4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80011e8:	00e0      	lsls	r0, r4, #3
 80011ea:	18c0      	adds	r0, r0, r3
 80011ec:	f141 0100 	adc.w	r1, r1, #0
 80011f0:	024b      	lsls	r3, r1, #9
 80011f2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80011f6:	0244      	lsls	r4, r0, #9
 80011f8:	4620      	mov	r0, r4
 80011fa:	4619      	mov	r1, r3
 80011fc:	2300      	movs	r3, #0
 80011fe:	f7ff f803 	bl	8000208 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800120a:	3301      	adds	r3, #1
 800120c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800120e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001212:	e023      	b.n	800125c <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800121c:	015c      	lsls	r4, r3, #5
 800121e:	2500      	movs	r5, #0
 8001220:	1ae4      	subs	r4, r4, r3
 8001222:	f165 0500 	sbc.w	r5, r5, #0
 8001226:	01ae      	lsls	r6, r5, #6
 8001228:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 800122c:	01a7      	lsls	r7, r4, #6
 800122e:	1b38      	subs	r0, r7, r4
 8001230:	eb66 0105 	sbc.w	r1, r6, r5
 8001234:	00cc      	lsls	r4, r1, #3
 8001236:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800123a:	00c5      	lsls	r5, r0, #3
 800123c:	18e8      	adds	r0, r5, r3
 800123e:	f144 0100 	adc.w	r1, r4, #0
 8001242:	028b      	lsls	r3, r1, #10
 8001244:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001248:	0284      	lsls	r4, r0, #10
 800124a:	4620      	mov	r0, r4
 800124c:	4619      	mov	r1, r3
 800124e:	2300      	movs	r3, #0
 8001250:	f7fe ffda 	bl	8000208 <__aeabi_uldivmod>
 8001254:	e7d5      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001258:	e000      	b.n	800125c <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800125c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	007a1200 	.word	0x007a1200
 8001268:	00f42400 	.word	0x00f42400

0800126c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800126c:	2800      	cmp	r0, #0
 800126e:	f000 80a0 	beq.w	80013b2 <HAL_RCC_ClockConfig+0x146>
{
 8001272:	b570      	push	{r4, r5, r6, lr}
 8001274:	460d      	mov	r5, r1
 8001276:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_ClockConfig+0x158>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	428b      	cmp	r3, r1
 8001282:	d20b      	bcs.n	800129c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_RCC_ClockConfig+0x158>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f023 030f 	bic.w	r3, r3, #15
 800128c:	430b      	orrs	r3, r1
 800128e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	428b      	cmp	r3, r1
 8001298:	f040 808d 	bne.w	80013b6 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	d017      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	f013 0f04 	tst.w	r3, #4
 80012a8:	d004      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012aa:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 80012ac:	6893      	ldr	r3, [r2, #8]
 80012ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012b2:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	f013 0f08 	tst.w	r3, #8
 80012ba:	d004      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012bc:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 80012be:	6893      	ldr	r3, [r2, #8]
 80012c0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012c4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c6:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 80012c8:	6893      	ldr	r3, [r2, #8]
 80012ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ce:	68a1      	ldr	r1, [r4, #8]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f013 0f01 	tst.w	r3, #1
 80012da:	d031      	beq.n	8001340 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d020      	beq.n	8001324 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d025      	beq.n	8001332 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f012 0f02 	tst.w	r2, #2
 80012ee:	d064      	beq.n	80013ba <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 80012f2:	688a      	ldr	r2, [r1, #8]
 80012f4:	f022 0203 	bic.w	r2, r2, #3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012fc:	f7ff fb6c 	bl	80009d8 <HAL_GetTick>
 8001300:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	6862      	ldr	r2, [r4, #4]
 800130c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001310:	d016      	beq.n	8001340 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001312:	f7ff fb61 	bl	80009d8 <HAL_GetTick>
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	f241 3388 	movw	r3, #5000	; 0x1388
 800131c:	4298      	cmp	r0, r3
 800131e:	d9f0      	bls.n	8001302 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001320:	2003      	movs	r0, #3
 8001322:	e045      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800132c:	d1e0      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
 8001330:	e03e      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800133a:	d1d9      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800133c:	2001      	movs	r0, #1
 800133e:	e037      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_RCC_ClockConfig+0x158>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	42ab      	cmp	r3, r5
 800134a:	d90a      	bls.n	8001362 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_RCC_ClockConfig+0x158>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f023 030f 	bic.w	r3, r3, #15
 8001354:	432b      	orrs	r3, r5
 8001356:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001358:	6813      	ldr	r3, [r2, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	42ab      	cmp	r3, r5
 8001360:	d12d      	bne.n	80013be <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	f013 0f04 	tst.w	r3, #4
 8001368:	d006      	beq.n	8001378 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 800136c:	6893      	ldr	r3, [r2, #8]
 800136e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001372:	68e1      	ldr	r1, [r4, #12]
 8001374:	430b      	orrs	r3, r1
 8001376:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	f013 0f08 	tst.w	r3, #8
 800137e:	d007      	beq.n	8001390 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 8001382:	6893      	ldr	r3, [r2, #8]
 8001384:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001388:	6921      	ldr	r1, [r4, #16]
 800138a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800138e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001390:	f7ff ff06 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_RCC_ClockConfig+0x160>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_ClockConfig+0x164>)
 80013a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_ClockConfig+0x168>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f7ff fad7 	bl	800095c <HAL_InitTick>
  return HAL_OK;
 80013ae:	2000      	movs	r0, #0
}
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
}
 80013b4:	4770      	bx	lr
      return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
 80013b8:	e7fa      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e7f8      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
 80013c0:	e7f6      	b.n	80013b0 <HAL_RCC_ClockConfig+0x144>
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08002554 	.word	0x08002554
 80013d0:	20000004 	.word	0x20000004
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013d8:	4b01      	ldr	r3, [pc, #4]	; (80013e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013e6:	f7ff fff7 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013f2:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80013f6:	40d8      	lsrs	r0, r3
 80013f8:	bd08      	pop	{r3, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	08002564 	.word	0x08002564

08001404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001404:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001406:	f7ff ffe7 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_RCC_GetPCLK2Freq+0x18>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001412:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
}
 8001416:	40d8      	lsrs	r0, r3
 8001418:	bd08      	pop	{r3, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	08002564 	.word	0x08002564

08001424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b083      	sub	sp, #12
 8001428:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800142a:	6806      	ldr	r6, [r0, #0]
 800142c:	f016 0601 	ands.w	r6, r6, #1
 8001430:	d00d      	beq.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001432:	4bb6      	ldr	r3, [pc, #728]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001444:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8139 	beq.w	80016be <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 800144c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800144e:	6825      	ldr	r5, [r4, #0]
 8001450:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8001454:	d011      	beq.n	800147a <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001456:	4aad      	ldr	r2, [pc, #692]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001458:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800145c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001460:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001462:	430b      	orrs	r3, r1
 8001464:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800146a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800146e:	f000 8128 	beq.w	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8127 	beq.w	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8001478:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001480:	d00f      	beq.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001482:	4aa2      	ldr	r2, [pc, #648]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001484:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001488:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800148c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800148e:	430b      	orrs	r3, r1
 8001490:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800149a:	f000 8116 	beq.w	80016ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800149e:	b903      	cbnz	r3, 80014a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80014a0:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014a8:	d000      	beq.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80014aa:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014ac:	f013 0f20 	tst.w	r3, #32
 80014b0:	f040 810d 	bne.w	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	f013 0f10 	tst.w	r3, #16
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80014bc:	4b93      	ldr	r3, [pc, #588]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80014ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014d0:	430a      	orrs	r2, r1
 80014d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80014dc:	d008      	beq.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014de:	4a8b      	ldr	r2, [pc, #556]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80014e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80014ea:	430b      	orrs	r3, r1
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80014f6:	d008      	beq.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80014f8:	4a84      	ldr	r2, [pc, #528]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80014fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80014fe:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001502:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001504:	430b      	orrs	r3, r1
 8001506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001510:	d008      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001512:	4a7e      	ldr	r2, [pc, #504]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001514:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001518:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800151c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800151e:	430b      	orrs	r3, r1
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800152a:	d008      	beq.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800152c:	4a77      	ldr	r2, [pc, #476]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800152e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001532:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001536:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001538:	430b      	orrs	r3, r1
 800153a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001544:	d008      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001546:	4a71      	ldr	r2, [pc, #452]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001548:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001552:	430b      	orrs	r3, r1
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800155e:	d008      	beq.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001560:	4a6a      	ldr	r2, [pc, #424]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001562:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001566:	f023 030c 	bic.w	r3, r3, #12
 800156a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800156c:	430b      	orrs	r3, r1
 800156e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001578:	d008      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800157a:	4a64      	ldr	r2, [pc, #400]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800157c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001580:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001584:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001586:	430b      	orrs	r3, r1
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001592:	d008      	beq.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001594:	4a5d      	ldr	r2, [pc, #372]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001596:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800159a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800159e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80015a0:	430b      	orrs	r3, r1
 80015a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80015ac:	d008      	beq.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015ae:	4a57      	ldr	r2, [pc, #348]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80015ba:	430b      	orrs	r3, r1
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80015c6:	d008      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80015d4:	430b      	orrs	r3, r1
 80015d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80015e0:	d008      	beq.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015ee:	430b      	orrs	r3, r1
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80015fa:	d008      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80015fc:	4a43      	ldr	r2, [pc, #268]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80015fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001602:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001606:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001608:	430b      	orrs	r3, r1
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001614:	d008      	beq.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001616:	4a3d      	ldr	r2, [pc, #244]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001618:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800161c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001620:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001622:	430b      	orrs	r3, r1
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800162e:	d00d      	beq.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001630:	4a36      	ldr	r2, [pc, #216]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001632:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001636:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800163a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800163c:	430b      	orrs	r3, r1
 800163e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001642:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001648:	f000 80ac 	beq.w	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	f013 0f08 	tst.w	r3, #8
 8001652:	d000      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001654:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001656:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800165a:	d008      	beq.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800165c:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800165e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001662:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001666:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001668:	430b      	orrs	r3, r1
 800166a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001674:	d009      	beq.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001678:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001680:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001684:	430b      	orrs	r3, r1
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800168a:	b926      	cbnz	r6, 8001696 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001692:	f000 8107 	beq.w	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800169e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff f99a 	bl	80009d8 <HAL_GetTick>
 80016a4:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80016ae:	d07b      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80016b0:	f7ff f992 	bl	80009d8 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2864      	cmp	r0, #100	; 0x64
 80016b8:	d9f5      	bls.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80016ba:	2003      	movs	r0, #3
 80016bc:	e0f5      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1;
 80016be:	2601      	movs	r6, #1
 80016c0:	e6c5      	b.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80016c2:	2601      	movs	r6, #1
 80016c4:	e6d5      	b.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80016c6:	2501      	movs	r5, #1
 80016c8:	e6d7      	b.n	800147a <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80016ca:	2601      	movs	r6, #1
 80016cc:	e6e7      	b.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80016ec:	f7ff f974 	bl	80009d8 <HAL_GetTick>
 80016f0:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016fa:	d10b      	bne.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fc:	f7ff f96c 	bl	80009d8 <HAL_GetTick>
 8001700:	1bc0      	subs	r0, r0, r7
 8001702:	2864      	cmp	r0, #100	; 0x64
 8001704:	d9f5      	bls.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        return HAL_TIMEOUT;
 8001706:	2003      	movs	r0, #3
 8001708:	e0cf      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001714:	4bab      	ldr	r3, [pc, #684]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001718:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800171c:	d015      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800171e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001720:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001724:	429a      	cmp	r2, r3
 8001726:	d010      	beq.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001728:	4ba6      	ldr	r3, [pc, #664]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800172a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800172c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001730:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001732:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001736:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001738:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800173a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800173e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001740:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	f013 0f01 	tst.w	r3, #1
 8001748:	d112      	bne.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800174a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800174c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001750:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001754:	d01d      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8001756:	4a9b      	ldr	r2, [pc, #620]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001758:	6893      	ldr	r3, [r2, #8]
 800175a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800175e:	6093      	str	r3, [r2, #8]
 8001760:	4998      	ldr	r1, [pc, #608]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001762:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001764:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001766:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800176a:	4313      	orrs	r3, r2
 800176c:	670b      	str	r3, [r1, #112]	; 0x70
 800176e:	e6a1      	b.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001770:	f7ff f932 	bl	80009d8 <HAL_GetTick>
 8001774:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f013 0f02 	tst.w	r3, #2
 800177e:	d1e4      	bne.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f92a 	bl	80009d8 <HAL_GetTick>
 8001784:	1bc0      	subs	r0, r0, r7
 8001786:	f241 3388 	movw	r3, #5000	; 0x1388
 800178a:	4298      	cmp	r0, r3
 800178c:	d9f3      	bls.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e08b      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001792:	488c      	ldr	r0, [pc, #560]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001794:	6882      	ldr	r2, [r0, #8]
 8001796:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800179a:	498b      	ldr	r1, [pc, #556]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 800179c:	4019      	ands	r1, r3
 800179e:	430a      	orrs	r2, r1
 80017a0:	6082      	str	r2, [r0, #8]
 80017a2:	e7dd      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 80017a4:	2501      	movs	r5, #1
 80017a6:	e751      	b.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	f013 0f01 	tst.w	r3, #1
 80017ae:	d013      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80017b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017b2:	b98b      	cbnz	r3, 80017d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80017b4:	4a83      	ldr	r2, [pc, #524]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80017b6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017ba:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80017be:	6860      	ldr	r0, [r4, #4]
 80017c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017c8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80017cc:	430b      	orrs	r3, r1
 80017ce:	68a1      	ldr	r1, [r4, #8]
 80017d0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80017d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017de:	d003      	beq.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80017e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017e2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80017e6:	d006      	beq.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80017e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80017ec:	d01e      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80017ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f4:	d11a      	bne.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80017f6:	4a73      	ldr	r2, [pc, #460]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80017f8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017fc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001800:	6860      	ldr	r0, [r4, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800180a:	68e0      	ldr	r0, [r4, #12]
 800180c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001810:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001814:	430b      	orrs	r3, r1
 8001816:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800181a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800181e:	f023 031f 	bic.w	r3, r3, #31
 8001822:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001824:	3901      	subs	r1, #1
 8001826:	430b      	orrs	r3, r1
 8001828:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001832:	d011      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001836:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800183a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800183e:	6866      	ldr	r6, [r4, #4]
 8001840:	6923      	ldr	r3, [r4, #16]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001848:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800184c:	4303      	orrs	r3, r0
 800184e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001852:	430b      	orrs	r3, r1
 8001854:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800185e:	d00d      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001860:	6862      	ldr	r2, [r4, #4]
 8001862:	6923      	ldr	r3, [r4, #16]
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800186a:	68e2      	ldr	r2, [r4, #12]
 800186c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001870:	68a2      	ldr	r2, [r4, #8]
 8001872:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001876:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001878:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800187c:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001886:	f7ff f8a7 	bl	80009d8 <HAL_GetTick>
 800188a:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001894:	d106      	bne.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001896:	f7ff f89f 	bl	80009d8 <HAL_GetTick>
 800189a:	1b80      	subs	r0, r0, r6
 800189c:	2864      	cmp	r0, #100	; 0x64
 800189e:	d9f5      	bls.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018a0:	2003      	movs	r0, #3
 80018a2:	e002      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80018a4:	2d01      	cmp	r5, #1
 80018a6:	d002      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80018a8:	2000      	movs	r0, #0
}
 80018aa:	b003      	add	sp, #12
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 80018ae:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018b8:	f7ff f88e 	bl	80009d8 <HAL_GetTick>
 80018bc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80018c6:	d006      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018c8:	f7ff f886 	bl	80009d8 <HAL_GetTick>
 80018cc:	1b40      	subs	r0, r0, r5
 80018ce:	2864      	cmp	r0, #100	; 0x64
 80018d0:	d9f5      	bls.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x49a>
        return HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
 80018d4:	e7e9      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80018dc:	d001      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80018de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80018e0:	b122      	cbz	r2, 80018ec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 80018e2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80018e6:	d01d      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ea:	b9db      	cbnz	r3, 8001924 <HAL_RCCEx_PeriphCLKConfig+0x500>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80018ec:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80018ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80018f2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80018f6:	6960      	ldr	r0, [r4, #20]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001900:	69a0      	ldr	r0, [r4, #24]
 8001902:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001906:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800190a:	430b      	orrs	r3, r1
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001910:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001914:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001918:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800191a:	3901      	subs	r1, #1
 800191c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001920:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800192a:	d003      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800192c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800192e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001932:	d031      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x574>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f013 0f08 	tst.w	r3, #8
 800193a:	d019      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800193e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001942:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001946:	6960      	ldr	r0, [r4, #20]
 8001948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001950:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001954:	430b      	orrs	r3, r1
 8001956:	69e1      	ldr	r1, [r4, #28]
 8001958:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001960:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001964:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001968:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800196a:	430b      	orrs	r3, r1
 800196c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800197a:	f7ff f82d 	bl	80009d8 <HAL_GetTick>
 800197e:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001988:	d119      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x59a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800198a:	f7ff f825 	bl	80009d8 <HAL_GetTick>
 800198e:	1b00      	subs	r0, r0, r4
 8001990:	2864      	cmp	r0, #100	; 0x64
 8001992:	d9f5      	bls.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        return HAL_TIMEOUT;
 8001994:	2003      	movs	r0, #3
 8001996:	e788      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800199a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800199e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019a2:	6965      	ldr	r5, [r4, #20]
 80019a4:	6a23      	ldr	r3, [r4, #32]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80019ac:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80019b0:	4303      	orrs	r3, r0
 80019b2:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80019b6:	430b      	orrs	r3, r1
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019bc:	e7ba      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x510>
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
 80019c0:	e773      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	0ffffcff 	.word	0x0ffffcff

080019cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80019d4:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019d6:	6802      	ldr	r2, [r0, #0]
 80019d8:	6893      	ldr	r3, [r2, #8]
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019e0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d005      	beq.n	80019f2 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019e6:	2320      	movs	r3, #32
 80019e8:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019ea:	2300      	movs	r3, #0
 80019ec:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80019ee:	6643      	str	r3, [r0, #100]	; 0x64
}
 80019f0:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019f2:	6802      	ldr	r2, [r0, #0]
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f023 0310 	bic.w	r3, r3, #16
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e7f3      	b.n	80019e6 <UART_EndRxTransfer+0x1a>

080019fe <HAL_UART_TxCpltCallback>:
}
 80019fe:	4770      	bx	lr

08001a00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001a00:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a02:	6801      	ldr	r1, [r0, #0]
 8001a04:	680a      	ldr	r2, [r1, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0a:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	6782      	str	r2, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001a10:	2200      	movs	r2, #0
 8001a12:	6682      	str	r2, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a14:	f7ff fff3 	bl	80019fe <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a18:	bd08      	pop	{r3, pc}

08001a1a <HAL_UART_ErrorCallback>:
}
 8001a1a:	4770      	bx	lr

08001a1c <UART_DMAAbortOnError>:
{
 8001a1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001a1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001a26:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001a2a:	f7ff fff6 	bl	8001a1a <HAL_UART_ErrorCallback>
}
 8001a2e:	bd08      	pop	{r3, pc}

08001a30 <HAL_UARTEx_RxEventCallback>:
}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_UART_IRQHandler>:
{
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a38:	6801      	ldr	r1, [r0, #0]
 8001a3a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a3c:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a3e:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a40:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8001a44:	401a      	ands	r2, r3
 8001a46:	d105      	bne.n	8001a54 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a48:	f013 0f20 	tst.w	r3, #32
 8001a4c:	d002      	beq.n	8001a54 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a4e:	f015 0f20 	tst.w	r5, #32
 8001a52:	d119      	bne.n	8001a88 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != 0U)
 8001a54:	b12a      	cbz	r2, 8001a62 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001a56:	f010 0001 	ands.w	r0, r0, #1
 8001a5a:	d11b      	bne.n	8001a94 <HAL_UART_IRQHandler+0x60>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001a5c:	4a8d      	ldr	r2, [pc, #564]	; (8001c94 <HAL_UART_IRQHandler+0x260>)
 8001a5e:	4215      	tst	r5, r2
 8001a60:	d118      	bne.n	8001a94 <HAL_UART_IRQHandler+0x60>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a62:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001a64:	2a01      	cmp	r2, #1
 8001a66:	f000 809c 	beq.w	8001ba2 <HAL_UART_IRQHandler+0x16e>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001a6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a6e:	d003      	beq.n	8001a78 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001a70:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001a74:	f040 8103 	bne.w	8001c7e <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001a78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a7c:	d003      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
 8001a7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a82:	f040 8103 	bne.w	8001c8c <HAL_UART_IRQHandler+0x258>
}
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
      if (huart->RxISR != NULL)
 8001a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0fb      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
        huart->RxISR(huart);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4798      	blx	r3
      return;
 8001a92:	e7f8      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a94:	f013 0f01 	tst.w	r3, #1
 8001a98:	d00a      	beq.n	8001ab0 <HAL_UART_IRQHandler+0x7c>
 8001a9a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001a9e:	d007      	beq.n	8001ab0 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	620a      	str	r2, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aa4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ab0:	f013 0f02 	tst.w	r3, #2
 8001ab4:	d009      	beq.n	8001aca <HAL_UART_IRQHandler+0x96>
 8001ab6:	b140      	cbz	r0, 8001aca <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	2102      	movs	r1, #2
 8001abc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001abe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001ac2:	f042 0204 	orr.w	r2, r2, #4
 8001ac6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001aca:	f013 0f04 	tst.w	r3, #4
 8001ace:	d009      	beq.n	8001ae4 <HAL_UART_IRQHandler+0xb0>
 8001ad0:	b140      	cbz	r0, 8001ae4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ad8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001ae4:	f013 0f08 	tst.w	r3, #8
 8001ae8:	d00b      	beq.n	8001b02 <HAL_UART_IRQHandler+0xce>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001aea:	f015 0f20 	tst.w	r5, #32
 8001aee:	d100      	bne.n	8001af2 <HAL_UART_IRQHandler+0xbe>
 8001af0:	b138      	cbz	r0, 8001b02 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	2108      	movs	r1, #8
 8001af6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001af8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001afc:	430a      	orrs	r2, r1
 8001afe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b02:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001b06:	d00c      	beq.n	8001b22 <HAL_UART_IRQHandler+0xee>
 8001b08:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 8001b0c:	d009      	beq.n	8001b22 <HAL_UART_IRQHandler+0xee>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b14:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b16:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b22:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d0ad      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b2a:	f013 0f20 	tst.w	r3, #32
 8001b2e:	d006      	beq.n	8001b3e <HAL_UART_IRQHandler+0x10a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b30:	f015 0f20 	tst.w	r5, #32
 8001b34:	d003      	beq.n	8001b3e <HAL_UART_IRQHandler+0x10a>
        if (huart->RxISR != NULL)
 8001b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b38:	b10b      	cbz	r3, 8001b3e <HAL_UART_IRQHandler+0x10a>
          huart->RxISR(huart);
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001b3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b4a:	d102      	bne.n	8001b52 <HAL_UART_IRQHandler+0x11e>
 8001b4c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001b50:	d020      	beq.n	8001b94 <HAL_UART_IRQHandler+0x160>
        UART_EndRxTransfer(huart);
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff ff3a 	bl	80019cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b60:	d014      	beq.n	8001b8c <HAL_UART_IRQHandler+0x158>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b68:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b6c:	b153      	cbz	r3, 8001b84 <HAL_UART_IRQHandler+0x150>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_UART_IRQHandler+0x264>)
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b72:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b74:	f7fe ffe8 	bl	8000b48 <HAL_DMA_Abort_IT>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d084      	beq.n	8001a86 <HAL_UART_IRQHandler+0x52>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b80:	4798      	blx	r3
 8001b82:	e780      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
            HAL_UART_ErrorCallback(huart);
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff48 	bl	8001a1a <HAL_UART_ErrorCallback>
 8001b8a:	e77c      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
          HAL_UART_ErrorCallback(huart);
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff ff44 	bl	8001a1a <HAL_UART_ErrorCallback>
 8001b92:	e778      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
        HAL_UART_ErrorCallback(huart);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff ff40 	bl	8001a1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 8001ba0:	e771      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ba2:	f013 0f10 	tst.w	r3, #16
 8001ba6:	f43f af60 	beq.w	8001a6a <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001baa:	f015 0f10 	tst.w	r5, #16
 8001bae:	f43f af5c 	beq.w	8001a6a <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	6893      	ldr	r3, [r2, #8]
 8001bba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bbe:	d037      	beq.n	8001c30 <HAL_UART_IRQHandler+0x1fc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001bc0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001bc2:	680b      	ldr	r3, [r1, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f43f af5c 	beq.w	8001a86 <HAL_UART_IRQHandler+0x52>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bce:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	f67f af57 	bls.w	8001a86 <HAL_UART_IRQHandler+0x52>
        huart->RxXferCount = nb_remaining_rx_data;
 8001bd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bdc:	69cb      	ldr	r3, [r1, #28]
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d10a      	bne.n	8001bfa <HAL_UART_IRQHandler+0x1c6>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001be4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8001be8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	1ac9      	subs	r1, r1, r3
 8001bf0:	b289      	uxth	r1, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff ff1c 	bl	8001a30 <HAL_UARTEx_RxEventCallback>
      return;
 8001bf8:	e745      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	6893      	ldr	r3, [r2, #8]
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6893      	ldr	r3, [r2, #8]
 8001c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c14:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8001c16:	2320      	movs	r3, #32
 8001c18:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6623      	str	r3, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0310 	bic.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c28:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c2a:	f7fe ff43 	bl	8000ab4 <HAL_DMA_Abort>
 8001c2e:	e7d9      	b.n	8001be4 <HAL_UART_IRQHandler+0x1b0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c30:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8001c34:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	1ac9      	subs	r1, r1, r3
 8001c3c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8001c3e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f43f af1e 	beq.w	8001a86 <HAL_UART_IRQHandler+0x52>
          && (nb_rx_data > 0U))
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	f43f af1b 	beq.w	8001a86 <HAL_UART_IRQHandler+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c56:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	6893      	ldr	r3, [r2, #8]
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8001c62:	2320      	movs	r3, #32
 8001c64:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c66:	2300      	movs	r3, #0
 8001c68:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8001c6a:	6663      	str	r3, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	f023 0310 	bic.w	r3, r3, #16
 8001c74:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7ff feda 	bl	8001a30 <HAL_UARTEx_RxEventCallback>
      return;
 8001c7c:	e703      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
    if (huart->TxISR != NULL)
 8001c7e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f43f af00 	beq.w	8001a86 <HAL_UART_IRQHandler+0x52>
      huart->TxISR(huart);
 8001c86:	4620      	mov	r0, r4
 8001c88:	4798      	blx	r3
    return;
 8001c8a:	e6fc      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
    UART_EndTransmit_IT(huart);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff feb7 	bl	8001a00 <UART_EndTransmit_IT>
    return;
 8001c92:	e6f8      	b.n	8001a86 <HAL_UART_IRQHandler+0x52>
 8001c94:	04000120 	.word	0x04000120
 8001c98:	08001a1d 	.word	0x08001a1d

08001c9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  uint16_t uhMask = huart->Mask;
 8001ca0:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ca4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8001ca6:	2a22      	cmp	r2, #34	; 0x22
 8001ca8:	d005      	beq.n	8001cb6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001caa:	6802      	ldr	r2, [r0, #0]
 8001cac:	6993      	ldr	r3, [r2, #24]
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	6193      	str	r3, [r2, #24]
  }
}
 8001cb4:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001cc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001cc8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8001cd6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e9      	bne.n	8001cb4 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce0:	6802      	ldr	r2, [r0, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ce8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cea:	6802      	ldr	r2, [r0, #0]
 8001cec:	6893      	ldr	r3, [r2, #8]
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cfc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d004      	beq.n	8001d0c <UART_RxISR_8BIT+0x70>
        HAL_UART_RxCpltCallback(huart);
 8001d02:	f7fe fcd9 	bl	80006b8 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d06:	2300      	movs	r3, #0
 8001d08:	6623      	str	r3, [r4, #96]	; 0x60
 8001d0a:	e7d3      	b.n	8001cb4 <UART_RxISR_8BIT+0x18>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d0c:	6802      	ldr	r2, [r0, #0]
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f023 0310 	bic.w	r3, r3, #16
 8001d14:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d16:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8001d1a:	f7ff fe89 	bl	8001a30 <HAL_UARTEx_RxEventCallback>
 8001d1e:	e7f2      	b.n	8001d06 <UART_RxISR_8BIT+0x6a>

08001d20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8001d24:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d28:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001d2a:	2b22      	cmp	r3, #34	; 0x22
 8001d2c:	d005      	beq.n	8001d3a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001d2e:	6802      	ldr	r2, [r0, #0]
 8001d30:	6993      	ldr	r3, [r2, #24]
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6193      	str	r3, [r2, #24]
  }
}
 8001d38:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001d3a:	6803      	ldr	r3, [r0, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001d3e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001d40:	4013      	ands	r3, r2
 8001d42:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8001d44:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d46:	3302      	adds	r3, #2
 8001d48:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001d4a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8001d58:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ea      	bne.n	8001d38 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d6a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6c:	6802      	ldr	r2, [r0, #0]
 8001d6e:	6893      	ldr	r3, [r2, #8]
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001d76:	2320      	movs	r3, #32
 8001d78:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d004      	beq.n	8001d8e <UART_RxISR_16BIT+0x6e>
        HAL_UART_RxCpltCallback(huart);
 8001d84:	f7fe fc98 	bl	80006b8 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6623      	str	r3, [r4, #96]	; 0x60
 8001d8c:	e7d4      	b.n	8001d38 <UART_RxISR_16BIT+0x18>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d8e:	6802      	ldr	r2, [r0, #0]
 8001d90:	6813      	ldr	r3, [r2, #0]
 8001d92:	f023 0310 	bic.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d98:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8001d9c:	f7ff fe48 	bl	8001a30 <HAL_UARTEx_RxEventCallback>
 8001da0:	e7f2      	b.n	8001d88 <UART_RxISR_16BIT+0x68>
	...

08001da4 <UART_SetConfig>:
{
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001da8:	6883      	ldr	r3, [r0, #8]
 8001daa:	6902      	ldr	r2, [r0, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	6942      	ldr	r2, [r0, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	69c2      	ldr	r2, [r0, #28]
 8001db4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001db6:	6801      	ldr	r1, [r0, #0]
 8001db8:	6808      	ldr	r0, [r1, #0]
 8001dba:	4aa0      	ldr	r2, [pc, #640]	; (800203c <UART_SetConfig+0x298>)
 8001dbc:	4002      	ands	r2, r0
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc2:	6822      	ldr	r2, [r4, #0]
 8001dc4:	6853      	ldr	r3, [r2, #4]
 8001dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dca:	68e1      	ldr	r1, [r4, #12]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dd0:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001dd2:	6a23      	ldr	r3, [r4, #32]
 8001dd4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dd6:	6821      	ldr	r1, [r4, #0]
 8001dd8:	688b      	ldr	r3, [r1, #8]
 8001dda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	4a96      	ldr	r2, [pc, #600]	; (8002040 <UART_SetConfig+0x29c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <UART_SetConfig+0x7a>
 8001dea:	4a96      	ldr	r2, [pc, #600]	; (8002044 <UART_SetConfig+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d029      	beq.n	8001e44 <UART_SetConfig+0xa0>
 8001df0:	4a95      	ldr	r2, [pc, #596]	; (8002048 <UART_SetConfig+0x2a4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d03e      	beq.n	8001e74 <UART_SetConfig+0xd0>
 8001df6:	4a95      	ldr	r2, [pc, #596]	; (800204c <UART_SetConfig+0x2a8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d062      	beq.n	8001ec2 <UART_SetConfig+0x11e>
 8001dfc:	4a94      	ldr	r2, [pc, #592]	; (8002050 <UART_SetConfig+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d071      	beq.n	8001ee6 <UART_SetConfig+0x142>
 8001e02:	4a94      	ldr	r2, [pc, #592]	; (8002054 <UART_SetConfig+0x2b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	f000 8083 	beq.w	8001f10 <UART_SetConfig+0x16c>
 8001e0a:	4a93      	ldr	r2, [pc, #588]	; (8002058 <UART_SetConfig+0x2b4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f000 8094 	beq.w	8001f3a <UART_SetConfig+0x196>
 8001e12:	4a92      	ldr	r2, [pc, #584]	; (800205c <UART_SetConfig+0x2b8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f000 80a5 	beq.w	8001f64 <UART_SetConfig+0x1c0>
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	e03a      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e1e:	4b90      	ldr	r3, [pc, #576]	; (8002060 <UART_SetConfig+0x2bc>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d809      	bhi.n	8001e40 <UART_SetConfig+0x9c>
 8001e2c:	e8df f003 	tbb	[pc, r3]
 8001e30:	06ae0402 	.word	0x06ae0402
 8001e34:	2301      	movs	r3, #1
 8001e36:	e02d      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e02b      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	e029      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e40:	2310      	movs	r3, #16
 8001e42:	e027      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e44:	4b86      	ldr	r3, [pc, #536]	; (8002060 <UART_SetConfig+0x2bc>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d80e      	bhi.n	8001e70 <UART_SetConfig+0xcc>
 8001e52:	e8df f003 	tbb	[pc, r3]
 8001e56:	0d07      	.short	0x0d07
 8001e58:	0d090d0d 	.word	0x0d090d0d
 8001e5c:	0d9d0d0d 	.word	0x0d9d0d0d
 8001e60:	0d0d      	.short	0x0d0d
 8001e62:	0b          	.byte	0x0b
 8001e63:	00          	.byte	0x00
 8001e64:	2300      	movs	r3, #0
 8001e66:	e015      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e013      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	e011      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e70:	2310      	movs	r3, #16
 8001e72:	e00f      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001e74:	4b7a      	ldr	r3, [pc, #488]	; (8002060 <UART_SetConfig+0x2bc>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f000 8088 	beq.w	8001f94 <UART_SetConfig+0x1f0>
 8001e84:	d819      	bhi.n	8001eba <UART_SetConfig+0x116>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8086 	beq.w	8001f98 <UART_SetConfig+0x1f4>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	f040 8085 	bne.w	8001f9c <UART_SetConfig+0x1f8>
 8001e92:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e94:	69e0      	ldr	r0, [r4, #28]
 8001e96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e9a:	f000 80ab 	beq.w	8001ff4 <UART_SetConfig+0x250>
    switch (clocksource)
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	f200 810c 	bhi.w	80020bc <UART_SetConfig+0x318>
 8001ea4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001ea8:	00fb00e8 	.word	0x00fb00e8
 8001eac:	010a00e6 	.word	0x010a00e6
 8001eb0:	010a00fe 	.word	0x010a00fe
 8001eb4:	010a010a 	.word	0x010a010a
 8001eb8:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eba:	2b30      	cmp	r3, #48	; 0x30
 8001ebc:	d170      	bne.n	8001fa0 <UART_SetConfig+0x1fc>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e7e8      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <UART_SetConfig+0x2bc>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d069      	beq.n	8001fa4 <UART_SetConfig+0x200>
 8001ed0:	d805      	bhi.n	8001ede <UART_SetConfig+0x13a>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d068      	beq.n	8001fa8 <UART_SetConfig+0x204>
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d168      	bne.n	8001fac <UART_SetConfig+0x208>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e7da      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001ede:	2bc0      	cmp	r3, #192	; 0xc0
 8001ee0:	d166      	bne.n	8001fb0 <UART_SetConfig+0x20c>
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	e7d6      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <UART_SetConfig+0x2bc>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d05e      	beq.n	8001fb4 <UART_SetConfig+0x210>
 8001ef6:	d806      	bhi.n	8001f06 <UART_SetConfig+0x162>
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05d      	beq.n	8001fb8 <UART_SetConfig+0x214>
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f00:	d15c      	bne.n	8001fbc <UART_SetConfig+0x218>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e7c6      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f0a:	d159      	bne.n	8001fc0 <UART_SetConfig+0x21c>
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	e7c1      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <UART_SetConfig+0x2bc>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f1e:	d051      	beq.n	8001fc4 <UART_SetConfig+0x220>
 8001f20:	d806      	bhi.n	8001f30 <UART_SetConfig+0x18c>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d050      	beq.n	8001fc8 <UART_SetConfig+0x224>
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d14f      	bne.n	8001fcc <UART_SetConfig+0x228>
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	e7b1      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001f34:	d14c      	bne.n	8001fd0 <UART_SetConfig+0x22c>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e7ac      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <UART_SetConfig+0x2bc>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f48:	d044      	beq.n	8001fd4 <UART_SetConfig+0x230>
 8001f4a:	d806      	bhi.n	8001f5a <UART_SetConfig+0x1b6>
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d043      	beq.n	8001fd8 <UART_SetConfig+0x234>
 8001f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f54:	d142      	bne.n	8001fdc <UART_SetConfig+0x238>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e79c      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001f5e:	d13f      	bne.n	8001fe0 <UART_SetConfig+0x23c>
 8001f60:	2308      	movs	r3, #8
 8001f62:	e797      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <UART_SetConfig+0x2bc>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f72:	d037      	beq.n	8001fe4 <UART_SetConfig+0x240>
 8001f74:	d805      	bhi.n	8001f82 <UART_SetConfig+0x1de>
 8001f76:	b3bb      	cbz	r3, 8001fe8 <UART_SetConfig+0x244>
 8001f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f7c:	d136      	bne.n	8001fec <UART_SetConfig+0x248>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e788      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f86:	d133      	bne.n	8001ff0 <UART_SetConfig+0x24c>
 8001f88:	2308      	movs	r3, #8
 8001f8a:	e783      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e781      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e77f      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e77d      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e77b      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	e779      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	e777      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e775      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e773      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fac:	2310      	movs	r3, #16
 8001fae:	e771      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	e76f      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e76d      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e76b      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	e769      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	e767      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e765      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e763      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fcc:	2310      	movs	r3, #16
 8001fce:	e761      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	e75f      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e75d      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e75b      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fdc:	2310      	movs	r3, #16
 8001fde:	e759      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	e757      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e755      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e753      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001fec:	2310      	movs	r3, #16
 8001fee:	e751      	b.n	8001e94 <UART_SetConfig+0xf0>
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	e74f      	b.n	8001e94 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d85b      	bhi.n	80020b0 <UART_SetConfig+0x30c>
 8001ff8:	e8df f003 	tbb	[pc, r3]
 8001ffc:	5a3a3405 	.word	0x5a3a3405
 8002000:	5a5a5a37 	.word	0x5a5a5a37
 8002004:	09          	.byte	0x09
 8002005:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002006:	f7ff f9ed 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800200a:	2800      	cmp	r0, #0
 800200c:	d052      	beq.n	80020b4 <UART_SetConfig+0x310>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800200e:	6862      	ldr	r2, [r4, #4]
 8002010:	0853      	lsrs	r3, r2, #1
 8002012:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002016:	fbb0 f0f2 	udiv	r0, r0, r2
 800201a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800201c:	f1a0 0210 	sub.w	r2, r0, #16
 8002020:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002024:	429a      	cmp	r2, r3
 8002026:	d847      	bhi.n	80020b8 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002028:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800202c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002030:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	60d8      	str	r0, [r3, #12]
 8002036:	2000      	movs	r0, #0
 8002038:	e045      	b.n	80020c6 <UART_SetConfig+0x322>
 800203a:	bf00      	nop
 800203c:	efff69f3 	.word	0xefff69f3
 8002040:	40011000 	.word	0x40011000
 8002044:	40004400 	.word	0x40004400
 8002048:	40004800 	.word	0x40004800
 800204c:	40004c00 	.word	0x40004c00
 8002050:	40005000 	.word	0x40005000
 8002054:	40011400 	.word	0x40011400
 8002058:	40007800 	.word	0x40007800
 800205c:	40007c00 	.word	0x40007c00
 8002060:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8002064:	f7ff f9ce 	bl	8001404 <HAL_RCC_GetPCLK2Freq>
        break;
 8002068:	e7cf      	b.n	800200a <UART_SetConfig+0x266>
        pclk = HAL_RCC_GetSysClockFreq();
 800206a:	f7ff f899 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
        break;
 800206e:	e7cc      	b.n	800200a <UART_SetConfig+0x266>
        pclk = (uint32_t) HSI_VALUE;
 8002070:	4817      	ldr	r0, [pc, #92]	; (80020d0 <UART_SetConfig+0x32c>)
 8002072:	e7cc      	b.n	800200e <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002074:	4816      	ldr	r0, [pc, #88]	; (80020d0 <UART_SetConfig+0x32c>)
 8002076:	e002      	b.n	800207e <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002078:	f7ff f9b4 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800207c:	b300      	cbz	r0, 80020c0 <UART_SetConfig+0x31c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002084:	fbb0 f0f3 	udiv	r0, r0, r3
 8002088:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800208a:	f1a0 0210 	sub.w	r2, r0, #16
 800208e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002092:	429a      	cmp	r2, r3
 8002094:	d816      	bhi.n	80020c4 <UART_SetConfig+0x320>
        huart->Instance->BRR = usartdiv;
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	60d8      	str	r0, [r3, #12]
 800209a:	2000      	movs	r0, #0
 800209c:	e013      	b.n	80020c6 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800209e:	f7ff f9b1 	bl	8001404 <HAL_RCC_GetPCLK2Freq>
        break;
 80020a2:	e7eb      	b.n	800207c <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 80020a4:	f7ff f87c 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
        break;
 80020a8:	e7e8      	b.n	800207c <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 80020aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020ae:	e7e6      	b.n	800207e <UART_SetConfig+0x2da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b0:	2001      	movs	r0, #1
 80020b2:	e008      	b.n	80020c6 <UART_SetConfig+0x322>
 80020b4:	2000      	movs	r0, #0
 80020b6:	e006      	b.n	80020c6 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e004      	b.n	80020c6 <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020bc:	2001      	movs	r0, #1
 80020be:	e002      	b.n	80020c6 <UART_SetConfig+0x322>
 80020c0:	2000      	movs	r0, #0
 80020c2:	e000      	b.n	80020c6 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80020ca:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	00f42400 	.word	0x00f42400

080020d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020d6:	f013 0f01 	tst.w	r3, #1
 80020da:	d006      	beq.n	80020ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020dc:	6802      	ldr	r2, [r0, #0]
 80020de:	6853      	ldr	r3, [r2, #4]
 80020e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80020e6:	430b      	orrs	r3, r1
 80020e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020ec:	f013 0f02 	tst.w	r3, #2
 80020f0:	d006      	beq.n	8002100 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	6853      	ldr	r3, [r2, #4]
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002102:	f013 0f04 	tst.w	r3, #4
 8002106:	d006      	beq.n	8002116 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	6853      	ldr	r3, [r2, #4]
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002112:	430b      	orrs	r3, r1
 8002114:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002116:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002118:	f013 0f08 	tst.w	r3, #8
 800211c:	d006      	beq.n	800212c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800211e:	6802      	ldr	r2, [r0, #0]
 8002120:	6853      	ldr	r3, [r2, #4]
 8002122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002126:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002128:	430b      	orrs	r3, r1
 800212a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800212c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800212e:	f013 0f10 	tst.w	r3, #16
 8002132:	d006      	beq.n	8002142 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002134:	6802      	ldr	r2, [r0, #0]
 8002136:	6893      	ldr	r3, [r2, #8]
 8002138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800213c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800213e:	430b      	orrs	r3, r1
 8002140:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002142:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002144:	f013 0f20 	tst.w	r3, #32
 8002148:	d006      	beq.n	8002158 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800214a:	6802      	ldr	r2, [r0, #0]
 800214c:	6893      	ldr	r3, [r2, #8]
 800214e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002152:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002158:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800215a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800215e:	d00a      	beq.n	8002176 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002160:	6802      	ldr	r2, [r0, #0]
 8002162:	6853      	ldr	r3, [r2, #4]
 8002164:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002168:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800216a:	430b      	orrs	r3, r1
 800216c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800216e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002174:	d00b      	beq.n	800218e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002176:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002178:	f013 0f80 	tst.w	r3, #128	; 0x80
 800217c:	d006      	beq.n	800218c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800217e:	6802      	ldr	r2, [r0, #0]
 8002180:	6853      	ldr	r3, [r2, #4]
 8002182:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002186:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002188:	430b      	orrs	r3, r1
 800218a:	6053      	str	r3, [r2, #4]
}
 800218c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800218e:	6802      	ldr	r2, [r0, #0]
 8002190:	6853      	ldr	r3, [r2, #4]
 8002192:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002196:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002198:	430b      	orrs	r3, r1
 800219a:	6053      	str	r3, [r2, #4]
 800219c:	e7eb      	b.n	8002176 <UART_AdvFeatureConfig+0xa2>

0800219e <UART_WaitOnFlagUntilTimeout>:
{
 800219e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	460f      	mov	r7, r1
 80021a6:	4616      	mov	r6, r2
 80021a8:	4699      	mov	r9, r3
 80021aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ae:	682c      	ldr	r4, [r5, #0]
 80021b0:	69e4      	ldr	r4, [r4, #28]
 80021b2:	ea37 0304 	bics.w	r3, r7, r4
 80021b6:	bf0c      	ite	eq
 80021b8:	2401      	moveq	r4, #1
 80021ba:	2400      	movne	r4, #0
 80021bc:	42b4      	cmp	r4, r6
 80021be:	d13d      	bne.n	800223c <UART_WaitOnFlagUntilTimeout+0x9e>
    if (Timeout != HAL_MAX_DELAY)
 80021c0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80021c4:	d0f3      	beq.n	80021ae <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7fe fc07 	bl	80009d8 <HAL_GetTick>
 80021ca:	eba0 0009 	sub.w	r0, r0, r9
 80021ce:	4540      	cmp	r0, r8
 80021d0:	d822      	bhi.n	8002218 <UART_WaitOnFlagUntilTimeout+0x7a>
 80021d2:	f1b8 0f00 	cmp.w	r8, #0
 80021d6:	d01f      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x7a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f012 0f04 	tst.w	r2, #4
 80021e0:	d0e5      	beq.n	80021ae <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80021e8:	d0e1      	beq.n	80021ae <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ee:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f0:	682a      	ldr	r2, [r5, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021f8:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fa:	682a      	ldr	r2, [r5, #0]
 80021fc:	6893      	ldr	r3, [r2, #8]
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002204:	2320      	movs	r3, #32
 8002206:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002208:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800220a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 800220e:	2300      	movs	r3, #0
 8002210:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 8002214:	2003      	movs	r0, #3
 8002216:	e012      	b.n	800223e <UART_WaitOnFlagUntilTimeout+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002218:	682a      	ldr	r2, [r5, #0]
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002220:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002222:	682a      	ldr	r2, [r5, #0]
 8002224:	6893      	ldr	r3, [r2, #8]
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800222c:	2320      	movs	r3, #32
 800222e:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002230:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002232:	2300      	movs	r3, #0
 8002234:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
 800223a:	e000      	b.n	800223e <UART_WaitOnFlagUntilTimeout+0xa0>
  return HAL_OK;
 800223c:	2000      	movs	r0, #0
}
 800223e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002242 <HAL_UART_Transmit>:
{
 8002242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800224a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800224c:	2b20      	cmp	r3, #32
 800224e:	d15a      	bne.n	8002306 <HAL_UART_Transmit+0xc4>
 8002250:	4604      	mov	r4, r0
 8002252:	460d      	mov	r5, r1
 8002254:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002256:	fab2 f382 	clz	r3, r2
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2900      	cmp	r1, #0
 800225e:	bf08      	it	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d153      	bne.n	800230e <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002266:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800226a:	2b01      	cmp	r3, #1
 800226c:	d051      	beq.n	8002312 <HAL_UART_Transmit+0xd0>
 800226e:	2301      	movs	r3, #1
 8002270:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227a:	2321      	movs	r3, #33	; 0x21
 800227c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800227e:	f7fe fbab 	bl	80009d8 <HAL_GetTick>
 8002282:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002284:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002288:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002292:	d005      	beq.n	80022a0 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 8002294:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002298:	2300      	movs	r3, #0
 800229a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800229e:	e014      	b.n	80022ca <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	b113      	cbz	r3, 80022aa <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80022a4:	f04f 0800 	mov.w	r8, #0
 80022a8:	e7f6      	b.n	8002298 <HAL_UART_Transmit+0x56>
      pdata16bits = (uint16_t *) pData;
 80022aa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80022ac:	2500      	movs	r5, #0
 80022ae:	e7f3      	b.n	8002298 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ba:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80022bc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80022c0:	b292      	uxth	r2, r2
 80022c2:	3a01      	subs	r2, #1
 80022c4:	b292      	uxth	r2, r2
 80022c6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80022ca:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b173      	cbz	r3, 80022f0 <HAL_UART_Transmit+0xae>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	9600      	str	r6, [sp, #0]
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff5f 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 80022e0:	b9c8      	cbnz	r0, 8002316 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d0e4      	beq.n	80022b0 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022ee:	e7e5      	b.n	80022bc <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f0:	9600      	str	r6, [sp, #0]
 80022f2:	463b      	mov	r3, r7
 80022f4:	2200      	movs	r2, #0
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff ff50 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 80022fe:	b960      	cbnz	r0, 800231a <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8002300:	2320      	movs	r3, #32
 8002302:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002304:	e000      	b.n	8002308 <HAL_UART_Transmit+0xc6>
    return HAL_BUSY;
 8002306:	2002      	movs	r0, #2
}
 8002308:	b002      	add	sp, #8
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800230e:	2001      	movs	r0, #1
 8002310:	e7fa      	b.n	8002308 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 8002312:	2002      	movs	r0, #2
 8002314:	e7f8      	b.n	8002308 <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8002316:	2003      	movs	r0, #3
 8002318:	e7f6      	b.n	8002308 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
 800231c:	e7f4      	b.n	8002308 <HAL_UART_Transmit+0xc6>

0800231e <UART_CheckIdleState>:
{
 800231e:	b510      	push	{r4, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800232a:	f7fe fb55 	bl	80009d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f013 0f08 	tst.w	r3, #8
 8002336:	d108      	bne.n	800234a <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 8002338:	2320      	movs	r3, #32
 800233a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800233c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	2000      	movs	r0, #0
 8002340:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002342:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8002346:	b002      	add	sp, #8
 8002348:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800234a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff ff20 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 800235e:	2800      	cmp	r0, #0
 8002360:	d0ea      	beq.n	8002338 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e7ef      	b.n	8002346 <UART_CheckIdleState+0x28>
	...

08002368 <UART_Start_Receive_IT>:
{
 8002368:	4603      	mov	r3, r0
  huart->pRxBuffPtr  = pData;
 800236a:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 800236c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8002370:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8002374:	2200      	movs	r2, #0
 8002376:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8002378:	6882      	ldr	r2, [r0, #8]
 800237a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800237e:	d006      	beq.n	800238e <UART_Start_Receive_IT+0x26>
 8002380:	b9a2      	cbnz	r2, 80023ac <UART_Start_Receive_IT+0x44>
 8002382:	6902      	ldr	r2, [r0, #16]
 8002384:	b972      	cbnz	r2, 80023a4 <UART_Start_Receive_IT+0x3c>
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 800238c:	e014      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
 800238e:	6902      	ldr	r2, [r0, #16]
 8002390:	b922      	cbnz	r2, 800239c <UART_Start_Receive_IT+0x34>
 8002392:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002396:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 800239a:	e00d      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80023a2:	e009      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
 80023a4:	227f      	movs	r2, #127	; 0x7f
 80023a6:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80023aa:	e005      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
 80023ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80023b0:	d01b      	beq.n	80023ea <UART_Start_Receive_IT+0x82>
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023be:	2222      	movs	r2, #34	; 0x22
 80023c0:	67da      	str	r2, [r3, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	688a      	ldr	r2, [r1, #8]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	608a      	str	r2, [r1, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023d2:	d014      	beq.n	80023fe <UART_Start_Receive_IT+0x96>
    huart->RxISR = UART_RxISR_8BIT;
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <UART_Start_Receive_IT+0xa4>)
 80023d6:	665a      	str	r2, [r3, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80023d8:	2000      	movs	r0, #0
 80023da:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80023ea:	6902      	ldr	r2, [r0, #16]
 80023ec:	b91a      	cbnz	r2, 80023f6 <UART_Start_Receive_IT+0x8e>
 80023ee:	227f      	movs	r2, #127	; 0x7f
 80023f0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80023f4:	e7e0      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
 80023f6:	223f      	movs	r2, #63	; 0x3f
 80023f8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80023fc:	e7dc      	b.n	80023b8 <UART_Start_Receive_IT+0x50>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	2a00      	cmp	r2, #0
 8002402:	d1e7      	bne.n	80023d4 <UART_Start_Receive_IT+0x6c>
    huart->RxISR = UART_RxISR_16BIT;
 8002404:	4a02      	ldr	r2, [pc, #8]	; (8002410 <UART_Start_Receive_IT+0xa8>)
 8002406:	665a      	str	r2, [r3, #100]	; 0x64
 8002408:	e7e6      	b.n	80023d8 <UART_Start_Receive_IT+0x70>
 800240a:	bf00      	nop
 800240c:	08001c9d 	.word	0x08001c9d
 8002410:	08001d21 	.word	0x08001d21

08002414 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002414:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002416:	2b20      	cmp	r3, #32
 8002418:	d11c      	bne.n	8002454 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 800241a:	fab2 f382 	clz	r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2900      	cmp	r1, #0
 8002422:	bf08      	it	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	b9bb      	cbnz	r3, 8002458 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8002428:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800242c:	2b01      	cmp	r3, #1
 800242e:	d015      	beq.n	800245c <HAL_UART_Receive_IT+0x48>
{
 8002430:	b510      	push	{r4, lr}
    __HAL_LOCK(huart);
 8002432:	2301      	movs	r3, #1
 8002434:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002438:	2300      	movs	r3, #0
 800243a:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	685c      	ldr	r4, [r3, #4]
 8002440:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8002444:	d003      	beq.n	800244e <HAL_UART_Receive_IT+0x3a>
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002446:	681c      	ldr	r4, [r3, #0]
 8002448:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 800244c:	601c      	str	r4, [r3, #0]
    return (UART_Start_Receive_IT(huart, pData, Size));
 800244e:	f7ff ff8b 	bl	8002368 <UART_Start_Receive_IT>
}
 8002452:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002454:	2002      	movs	r0, #2
 8002456:	4770      	bx	lr
      return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	4770      	bx	lr
    __HAL_LOCK(huart);
 800245c:	2002      	movs	r0, #2
}
 800245e:	4770      	bx	lr

08002460 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8002460:	2800      	cmp	r0, #0
 8002462:	d03a      	beq.n	80024da <HAL_RS485Ex_Init+0x7a>
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	460f      	mov	r7, r1
 8002468:	4616      	mov	r6, r2
 800246a:	461d      	mov	r5, r3
 800246c:	4604      	mov	r4, r0
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002470:	b353      	cbz	r3, 80024c8 <HAL_RS485Ex_Init+0x68>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002472:	2324      	movs	r3, #36	; 0x24
 8002474:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002476:	6822      	ldr	r2, [r4, #0]
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff fc8f 	bl	8001da4 <UART_SetConfig>
 8002486:	2801      	cmp	r0, #1
 8002488:	d01d      	beq.n	80024c6 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248c:	bb0b      	cbnz	r3, 80024d2 <HAL_RS485Ex_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	6893      	ldr	r3, [r2, #8]
 8002492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002496:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	6893      	ldr	r3, [r2, #8]
 800249c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024a0:	433b      	orrs	r3, r7
 80024a2:	6093      	str	r3, [r2, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80024a4:	042d      	lsls	r5, r5, #16
 80024a6:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	4d0c      	ldr	r5, [pc, #48]	; (80024e0 <HAL_RS485Ex_Init+0x80>)
 80024b0:	400d      	ands	r5, r1
 80024b2:	432a      	orrs	r2, r5
 80024b4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	6822      	ldr	r2, [r4, #0]
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff ff2c 	bl	800231e <UART_CheckIdleState>
}
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80024c8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80024cc:	f7fe f9ac 	bl	8000828 <HAL_UART_MspInit>
 80024d0:	e7cf      	b.n	8002472 <HAL_RS485Ex_Init+0x12>
    UART_AdvFeatureConfig(huart);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff fdfe 	bl	80020d4 <UART_AdvFeatureConfig>
 80024d8:	e7d9      	b.n	800248e <HAL_RS485Ex_Init+0x2e>
    return HAL_ERROR;
 80024da:	2001      	movs	r0, #1
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	fc00ffff 	.word	0xfc00ffff

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d0d      	ldr	r5, [pc, #52]	; (800251c <__libc_init_array+0x38>)
 80024e8:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ea:	1b64      	subs	r4, r4, r5
 80024ec:	10a4      	asrs	r4, r4, #2
 80024ee:	2600      	movs	r6, #0
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	4d0b      	ldr	r5, [pc, #44]	; (8002524 <__libc_init_array+0x40>)
 80024f6:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x44>)
 80024f8:	f000 f820 	bl	800253c <_init>
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	2600      	movs	r6, #0
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	08002574 	.word	0x08002574
 8002520:	08002574 	.word	0x08002574
 8002524:	08002574 	.word	0x08002574
 8002528:	08002578 	.word	0x08002578

0800252c <memset>:
 800252c:	4402      	add	r2, r0
 800252e:	4603      	mov	r3, r0
 8002530:	4293      	cmp	r3, r2
 8002532:	d100      	bne.n	8002536 <memset+0xa>
 8002534:	4770      	bx	lr
 8002536:	f803 1b01 	strb.w	r1, [r3], #1
 800253a:	e7f9      	b.n	8002530 <memset+0x4>

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
