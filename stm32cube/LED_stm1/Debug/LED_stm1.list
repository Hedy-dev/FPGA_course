
LED_stm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002228  2000000c  08006128  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002234  08006128  00022234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d1  00000000  00000000  0003191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00034cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022afb  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6b8  00000000  00000000  00058283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd79b  00000000  00000000  0006793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001350d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  0013512c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080060c0 	.word	0x080060c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080060c0 	.word	0x080060c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbd4 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8ea 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f8c0 	bl	8000690 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000510:	f000 f874 	bl	80005fc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000514:	f005 faf2 	bl	8005afc <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f890 	bl	800063c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x20>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fdbe 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SystemClock_Config+0xd4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xd8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xd8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000598:	2332      	movs	r3, #50	; 0x32
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f913 	bl	80027d8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b8:	f000 f932 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fb06 	bl	8001bec <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e6:	f000 f91b 	bl	8000820 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 8000602:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <MX_SDIO_SD_Init+0x3c>)
 8000604:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <MX_SDIO_SD_Init+0x38>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000140 	.word	0x20000140
 8000638:	40012c00 	.word	0x40012c00

0800063c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART1_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000648:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000674:	f003 fe67 	bl	8004346 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f8cf 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000009c 	.word	0x2000009c
 800068c:	40011000 	.word	0x40011000

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_DMA_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_DMA_Init+0x4c>)
 80006a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_DMA_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	203b      	movs	r0, #59	; 0x3b
 80006b8:	f000 fc69 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006bc:	203b      	movs	r0, #59	; 0x3b
 80006be:	f000 fc82 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2045      	movs	r0, #69	; 0x45
 80006c8:	f000 fc61 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006cc:	2045      	movs	r0, #69	; 0x45
 80006ce:	f000 fc7a 	bl	8000fc6 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_GPIO_Init+0x130>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MX_GPIO_Init+0x130>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_GPIO_Init+0x130>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_GPIO_Init+0x130>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_GPIO_Init+0x130>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x130>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_GPIO_Init+0x130>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <MX_GPIO_Init+0x130>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_GPIO_Init+0x130>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_GPIO_Init+0x130>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <MX_GPIO_Init+0x130>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0x130>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x134>)
 8000788:	f001 f9f2 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	481d      	ldr	r0, [pc, #116]	; (8000818 <MX_GPIO_Init+0x138>)
 80007a4:	f001 f838 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <MX_GPIO_Init+0x138>)
 80007bc:	f001 f82c 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480f      	ldr	r0, [pc, #60]	; (8000814 <MX_GPIO_Init+0x134>)
 80007d8:	f001 f81e 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_NXT_SAMPLE_Pin */
  GPIO_InitStruct.Pin = INT_NXT_SAMPLE_Pin;
 80007dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_NXT_SAMPLE_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_GPIO_Init+0x13c>)
 80007f4:	f001 f810 	bl	8001818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f000 fbc6 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000802:	2028      	movs	r0, #40	; 0x28
 8000804:	f000 fbdf 	bl	8000fc6 <HAL_NVIC_EnableIRQ>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020800 	.word	0x40020800
 800081c:	40020400 	.word	0x40020400

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fb84 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0a2      	sub	sp, #136	; 0x88
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	225c      	movs	r2, #92	; 0x5c
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f005 fc07 	bl	80060b0 <memset>
  if(hsd->Instance==SDIO)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a83      	ldr	r2, [pc, #524]	; (8000ab4 <HAL_SD_MspInit+0x238>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	f040 80fe 	bne.w	8000aaa <HAL_SD_MspInit+0x22e>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80008ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008b4:	2300      	movs	r3, #0
 80008b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80008b8:	2300      	movs	r3, #0
 80008ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 faad 	bl	8001e20 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80008cc:	f7ff ffa8 	bl	8000820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	4b78      	ldr	r3, [pc, #480]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	4a77      	ldr	r2, [pc, #476]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008de:	6453      	str	r3, [r2, #68]	; 0x44
 80008e0:	4b75      	ldr	r3, [pc, #468]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	4b71      	ldr	r3, [pc, #452]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a70      	ldr	r2, [pc, #448]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a69      	ldr	r2, [pc, #420]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
 8000918:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a62      	ldr	r2, [pc, #392]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <HAL_SD_MspInit+0x23c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000940:	2307      	movs	r3, #7
 8000942:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000952:	230c      	movs	r3, #12
 8000954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800095c:	4619      	mov	r1, r3
 800095e:	4857      	ldr	r0, [pc, #348]	; (8000abc <HAL_SD_MspInit+0x240>)
 8000960:	f000 ff5a 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000964:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000968:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000978:	230c      	movs	r3, #12
 800097a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000982:	4619      	mov	r1, r3
 8000984:	484e      	ldr	r0, [pc, #312]	; (8000ac0 <HAL_SD_MspInit+0x244>)
 8000986:	f000 ff47 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800098a:	2304      	movs	r3, #4
 800098c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800099c:	230c      	movs	r3, #12
 800099e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a6:	4619      	mov	r1, r3
 80009a8:	4846      	ldr	r0, [pc, #280]	; (8000ac4 <HAL_SD_MspInit+0x248>)
 80009aa:	f000 ff35 	bl	8001818 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009b0:	4a46      	ldr	r2, [pc, #280]	; (8000acc <HAL_SD_MspInit+0x250>)
 80009b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009bc:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c2:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c8:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d0:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009de:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009e2:	2220      	movs	r2, #32
 80009e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 80009fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a00:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 8000a02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a08:	482f      	ldr	r0, [pc, #188]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 8000a0a:	f000 faf7 	bl	8000ffc <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8000a14:	f7ff ff04 	bl	8000820 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <HAL_SD_MspInit+0x24c>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a26:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <HAL_SD_MspInit+0x258>)
 8000a28:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a34:	2240      	movs	r2, #64	; 0x40
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a44:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a54:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a58:	2220      	movs	r2, #32
 8000a5a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a80:	f000 fabc 	bl	8000ffc <HAL_DMA_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8000a8a:	f7ff fec9 	bl	8000820 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_SD_MspInit+0x254>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2031      	movs	r0, #49	; 0x31
 8000aa0:	f000 fa75 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000aa4:	2031      	movs	r0, #49	; 0x31
 8000aa6:	f000 fa8e 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3788      	adds	r7, #136	; 0x88
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	2000003c 	.word	0x2000003c
 8000acc:	40026458 	.word	0x40026458
 8000ad0:	200000e0 	.word	0x200000e0
 8000ad4:	400264a0 	.word	0x400264a0

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_UART_MspInit+0x94>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d134      	bne.n	8000b64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <HAL_UART_MspInit+0x9c>)
 8000b50:	f000 fe62 	bl	8001818 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2025      	movs	r0, #37	; 0x25
 8000b5a:	f000 fa18 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5e:	2025      	movs	r0, #37	; 0x25
 8000b60:	f000 fa31 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8c4 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f003 fc05 	bl	80043e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000009c 	.word	0x2000009c

08000be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be8:	f000 ffdc 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000bec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bf0:	f000 ffd8 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <SDIO_IRQHandler+0x10>)
 8000bfe:	f002 faf9 	bl	80031f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000140 	.word	0x20000140

08000c0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <DMA2_Stream3_IRQHandler+0x10>)
 8000c12:	f000 fb8b 	bl	800132c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000003c 	.word	0x2000003c

08000c20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA2_Stream6_IRQHandler+0x10>)
 8000c26:	f000 fb81 	bl	800132c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000e0 	.word	0x200000e0

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f005 f9ef 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc37 	bl	80004fc <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c9c:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca4:	20002234 	.word	0x20002234

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f94f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fda4 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f967 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f92f 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	200001c4 	.word	0x200001c4

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	200001c4 	.word	0x200001c4

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff3e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff31 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff feb6 	bl	8000d78 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e099      	b.n	800114c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001038:	e00f      	b.n	800105a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800103a:	f7ff fe9d 	bl	8000d78 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b05      	cmp	r3, #5
 8001046:	d908      	bls.n	800105a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2220      	movs	r2, #32
 800104c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e078      	b.n	800114c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e8      	bne.n	800103a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_DMA_Init+0x158>)
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d107      	bne.n	80010c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4313      	orrs	r3, r2
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d117      	bne.n	800111e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00e      	beq.n	800111e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fb0d 	bl	8001720 <DMA_CheckFifoParam>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800111a:	2301      	movs	r3, #1
 800111c:	e016      	b.n	800114c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fac4 	bl	80016b4 <DMA_CalcBaseAndBitshift>
 800112c:	4603      	mov	r3, r0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	223f      	movs	r2, #63	; 0x3f
 8001136:	409a      	lsls	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	f010803f 	.word	0xf010803f

08001158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_DMA_Start_IT+0x26>
 800117a:	2302      	movs	r3, #2
 800117c:	e040      	b.n	8001200 <HAL_DMA_Start_IT+0xa8>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d12f      	bne.n	80011f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fa56 	bl	8001658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	223f      	movs	r2, #63	; 0x3f
 80011b2:	409a      	lsls	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0216 	orr.w	r2, r2, #22
 80011c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0208 	orr.w	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e005      	b.n	80011fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
 80011fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001216:	f7ff fdaf 	bl	8000d78 <HAL_GetTick>
 800121a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d008      	beq.n	800123a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e052      	b.n	80012e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0216 	bic.w	r2, r2, #22
 8001248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695a      	ldr	r2, [r3, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <HAL_DMA_Abort+0x62>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0208 	bic.w	r2, r2, #8
 8001278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128a:	e013      	b.n	80012b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800128c:	f7ff fd74 	bl	8000d78 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b05      	cmp	r3, #5
 8001298:	d90c      	bls.n	80012b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2220      	movs	r2, #32
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2203      	movs	r2, #3
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e015      	b.n	80012e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e4      	bne.n	800128c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	223f      	movs	r2, #63	; 0x3f
 80012c8:	409a      	lsls	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00c      	b.n	8001320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001338:	4b92      	ldr	r3, [pc, #584]	; (8001584 <HAL_DMA_IRQHandler+0x258>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a92      	ldr	r2, [pc, #584]	; (8001588 <HAL_DMA_IRQHandler+0x25c>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0a9b      	lsrs	r3, r3, #10
 8001344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2208      	movs	r2, #8
 8001358:	409a      	lsls	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01a      	beq.n	8001398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001384:	2208      	movs	r2, #8
 8001386:	409a      	lsls	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2201      	movs	r2, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d012      	beq.n	80013ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2201      	movs	r2, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f043 0202 	orr.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2204      	movs	r2, #4
 80013d4:	409a      	lsls	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d012      	beq.n	8001404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	2204      	movs	r2, #4
 80013f2:	409a      	lsls	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fc:	f043 0204 	orr.w	r2, r3, #4
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	2210      	movs	r2, #16
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d043      	beq.n	800149c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03c      	beq.n	800149c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	2210      	movs	r2, #16
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d018      	beq.n	800146e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d024      	beq.n	800149c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
 800145a:	e01f      	b.n	800149c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01b      	beq.n	800149c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
 800146c:	e016      	b.n	800149c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d107      	bne.n	800148c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0208 	bic.w	r2, r2, #8
 800148a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2220      	movs	r2, #32
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 808e 	beq.w	80015ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8086 	beq.w	80015ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2220      	movs	r2, #32
 80014c4:	409a      	lsls	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d136      	bne.n	8001544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0216 	bic.w	r2, r2, #22
 80014e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <HAL_DMA_IRQHandler+0x1da>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	223f      	movs	r2, #63	; 0x3f
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001536:	2b00      	cmp	r3, #0
 8001538:	d07d      	beq.n	8001636 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
        }
        return;
 8001542:	e078      	b.n	8001636 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01c      	beq.n	800158c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d108      	bne.n	8001572 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	2b00      	cmp	r3, #0
 8001566:	d030      	beq.n	80015ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e02b      	b.n	80015ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d027      	beq.n	80015ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
 8001582:	e022      	b.n	80015ca <HAL_DMA_IRQHandler+0x29e>
 8001584:	20000000 	.word	0x20000000
 8001588:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0210 	bic.w	r2, r2, #16
 80015a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d032      	beq.n	8001638 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d022      	beq.n	8001624 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d307      	bcc.n	8001612 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f2      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x2ca>
 8001610:	e000      	b.n	8001614 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001612:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
 8001634:	e000      	b.n	8001638 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001636:	bf00      	nop
    }
  }
}
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop

08001640 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d108      	bne.n	8001698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001696:	e007      	b.n	80016a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	60da      	str	r2, [r3, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3b10      	subs	r3, #16
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <DMA_CalcBaseAndBitshift+0x64>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <DMA_CalcBaseAndBitshift+0x68>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d909      	bls.n	80016f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	1d1a      	adds	r2, r3, #4
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
 80016f4:	e007      	b.n	8001706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	aaaaaaab 	.word	0xaaaaaaab
 800171c:	080060f0 	.word	0x080060f0

08001720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11f      	bne.n	800177a <DMA_CheckFifoParam+0x5a>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d856      	bhi.n	80017ee <DMA_CheckFifoParam+0xce>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <DMA_CheckFifoParam+0x28>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001759 	.word	0x08001759
 800174c:	0800176b 	.word	0x0800176b
 8001750:	08001759 	.word	0x08001759
 8001754:	080017ef 	.word	0x080017ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d046      	beq.n	80017f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001768:	e043      	b.n	80017f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001772:	d140      	bne.n	80017f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001778:	e03d      	b.n	80017f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001782:	d121      	bne.n	80017c8 <DMA_CheckFifoParam+0xa8>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d837      	bhi.n	80017fa <DMA_CheckFifoParam+0xda>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <DMA_CheckFifoParam+0x70>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	080017a7 	.word	0x080017a7
 8001798:	080017a1 	.word	0x080017a1
 800179c:	080017b9 	.word	0x080017b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
      break;
 80017a4:	e030      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d025      	beq.n	80017fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b6:	e022      	b.n	80017fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c0:	d11f      	bne.n	8001802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017c6:	e01c      	b.n	8001802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d903      	bls.n	80017d6 <DMA_CheckFifoParam+0xb6>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d003      	beq.n	80017dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017d4:	e018      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
      break;
 80017da:	e015      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
      break;
 80017ec:	e00b      	b.n	8001806 <DMA_CheckFifoParam+0xe6>
      break;
 80017ee:	bf00      	nop
 80017f0:	e00a      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;
 80017f2:	bf00      	nop
 80017f4:	e008      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;
 80017f6:	bf00      	nop
 80017f8:	e006      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;
 80017fa:	bf00      	nop
 80017fc:	e004      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;
 80017fe:	bf00      	nop
 8001800:	e002      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;   
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <DMA_CheckFifoParam+0xe8>
      break;
 8001806:	bf00      	nop
    }
  } 
  
  return status; 
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e165      	b.n	8001b00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8154 	bne.w	8001afa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	2b02      	cmp	r3, #2
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80ae 	beq.w	8001afa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <HAL_GPIO_Init+0x300>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a5c      	ldr	r2, [pc, #368]	; (8001b18 <HAL_GPIO_Init+0x300>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <HAL_GPIO_Init+0x300>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_GPIO_Init+0x304>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x308>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d025      	beq.n	8001a32 <HAL_GPIO_Init+0x21a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x30c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <HAL_GPIO_Init+0x216>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x310>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x212>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x314>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x20e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x318>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x20a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x206>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a49      	ldr	r2, [pc, #292]	; (8001b38 <HAL_GPIO_Init+0x320>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x202>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00c      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e00a      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a1e:	2305      	movs	r3, #5
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x21c>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4935      	ldr	r1, [pc, #212]	; (8001b1c <HAL_GPIO_Init+0x304>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a52:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a76:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f ae96 	bls.w	8001834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40021400 	.word	0x40021400
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f806 	bl	8001bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cc      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d90c      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d044      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e067      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4934      	ldr	r1, [pc, #208]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f84c 	bl	8000d78 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f848 	bl	8000d78 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d20c      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 fb7f 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffac 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080060d8 	.word	0x080060d8
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	080060e8 	.word	0x080060e8

08001df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dfc:	f7ff ffdc 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0b5b      	lsrs	r3, r3, #13
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	080060e8 	.word	0x080060e8

08001e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d010      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e58:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	496c      	ldr	r1, [pc, #432]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d010      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e86:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	4960      	ldr	r1, [pc, #384]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d017      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb4:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4955      	ldr	r1, [pc, #340]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d017      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef0:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	4946      	ldr	r1, [pc, #280]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808a 	beq.w	8002042 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a38      	ldr	r2, [pc, #224]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f56:	f7fe ff0f 	bl	8000d78 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe ff0b 	bl	8000d78 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e278      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d02f      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d028      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d114      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fed9 	bl	8000d78 <HAL_GetTick>
 8001fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe fed5 	bl	8000d78 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e240      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ff8:	d114      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800200a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200e:	4902      	ldr	r1, [pc, #8]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	e00c      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000
 8002020:	42470e40 	.word	0x42470e40
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800202a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800202e:	6093      	str	r3, [r2, #8]
 8002030:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	4944      	ldr	r1, [pc, #272]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800203e:	4313      	orrs	r3, r2
 8002040:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002056:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4937      	ldr	r1, [pc, #220]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	492e      	ldr	r1, [pc, #184]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d011      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	4926      	ldr	r1, [pc, #152]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020c6:	d101      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	491a      	ldr	r1, [pc, #104]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d011      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002100:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002108:	4911      	ldr	r1, [pc, #68]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800211a:	2301      	movs	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	f040 80ff 	bne.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002136:	f7fe fe1f 	bl	8000d78 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800213c:	e00e      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800213e:	f7fe fe1b 	bl	8000d78 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d907      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e188      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002150:	40023800 	.word	0x40023800
 8002154:	424711e0 	.word	0x424711e0
 8002158:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ea      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002184:	2b00      	cmp	r3, #0
 8002186:	d028      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d124      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002190:	4b71      	ldr	r3, [pc, #452]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021a2:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	0e1b      	lsrs	r3, r3, #24
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	071b      	lsls	r3, r3, #28
 80021d2:	4961      	ldr	r1, [pc, #388]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d035      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002204:	d130      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002218:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221e:	0f1b      	lsrs	r3, r3, #28
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	019b      	lsls	r3, r3, #6
 8002230:	431a      	orrs	r2, r3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	431a      	orrs	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	071b      	lsls	r3, r3, #28
 8002248:	4943      	ldr	r1, [pc, #268]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002250:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002256:	f023 021f 	bic.w	r2, r3, #31
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	493d      	ldr	r1, [pc, #244]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d029      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800227c:	d124      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002296:	0f1b      	lsrs	r3, r3, #28
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	431a      	orrs	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	071b      	lsls	r3, r3, #28
 80022c0:	4925      	ldr	r1, [pc, #148]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d016      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	019b      	lsls	r3, r3, #6
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	4917      	ldr	r1, [pc, #92]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002308:	f7fe fd36 	bl	8000d78 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002310:	f7fe fd32 	bl	8000d78 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e09f      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	2b01      	cmp	r3, #1
 8002332:	f040 8095 	bne.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe fd1c 	bl	8000d78 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002344:	f7fe fd18 	bl	8000d78 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e085      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	42470068 	.word	0x42470068
 8002360:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002370:	d0e8      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02b      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	2b00      	cmp	r3, #0
 8002398:	d127      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	431a      	orrs	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	085b      	lsrs	r3, r3, #1
 80023bc:	3b01      	subs	r3, #1
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	4928      	ldr	r1, [pc, #160]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	3b01      	subs	r3, #1
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	4922      	ldr	r1, [pc, #136]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01d      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023fe:	d118      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	0e1b      	lsrs	r3, r3, #24
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	3b01      	subs	r3, #1
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	4910      	ldr	r1, [pc, #64]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe fc9e 	bl	8000d78 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002440:	f7fe fc9a 	bl	8000d78 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e007      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245e:	d1ef      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3730      	adds	r7, #48	; 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	42470070 	.word	0x42470070

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b088      	sub	sp, #32
 800247a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002490:	4bce      	ldr	r3, [pc, #824]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b0c      	cmp	r3, #12
 800249a:	f200 818d 	bhi.w	80027b8 <HAL_RCC_GetSysClockFreq+0x344>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024d9 	.word	0x080024d9
 80024a8:	080027b9 	.word	0x080027b9
 80024ac:	080027b9 	.word	0x080027b9
 80024b0:	080027b9 	.word	0x080027b9
 80024b4:	080024df 	.word	0x080024df
 80024b8:	080027b9 	.word	0x080027b9
 80024bc:	080027b9 	.word	0x080027b9
 80024c0:	080027b9 	.word	0x080027b9
 80024c4:	080024e5 	.word	0x080024e5
 80024c8:	080027b9 	.word	0x080027b9
 80024cc:	080027b9 	.word	0x080027b9
 80024d0:	080027b9 	.word	0x080027b9
 80024d4:	08002659 	.word	0x08002659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4bbd      	ldr	r3, [pc, #756]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024da:	61bb      	str	r3, [r7, #24]
       break;
 80024dc:	e16f      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024de:	4bbd      	ldr	r3, [pc, #756]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x360>)
 80024e0:	61bb      	str	r3, [r7, #24]
      break;
 80024e2:	e16c      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e4:	4bb9      	ldr	r3, [pc, #740]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ee:	4bb7      	ldr	r3, [pc, #732]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d053      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4bb4      	ldr	r3, [pc, #720]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	461a      	mov	r2, r3
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	ea02 0400 	and.w	r4, r2, r0
 8002512:	603c      	str	r4, [r7, #0]
 8002514:	400b      	ands	r3, r1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	e9d7 4500 	ldrd	r4, r5, [r7]
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	014b      	lsls	r3, r1, #5
 800252a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800252e:	0142      	lsls	r2, r0, #5
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	4623      	mov	r3, r4
 8002536:	1ac0      	subs	r0, r0, r3
 8002538:	462b      	mov	r3, r5
 800253a:	eb61 0103 	sbc.w	r1, r1, r3
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800254c:	0182      	lsls	r2, r0, #6
 800254e:	1a12      	subs	r2, r2, r0
 8002550:	eb63 0301 	sbc.w	r3, r3, r1
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	00d9      	lsls	r1, r3, #3
 800255e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002562:	00d0      	lsls	r0, r2, #3
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4621      	mov	r1, r4
 800256a:	1852      	adds	r2, r2, r1
 800256c:	4629      	mov	r1, r5
 800256e:	eb43 0101 	adc.w	r1, r3, r1
 8002572:	460b      	mov	r3, r1
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	0259      	lsls	r1, r3, #9
 800257e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002582:	0250      	lsls	r0, r2, #9
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	461a      	mov	r2, r3
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	f7fd fe36 	bl	8000204 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e04c      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	461a      	mov	r2, r3
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	ea02 0a00 	and.w	sl, r2, r0
 80025ba:	ea03 0b01 	and.w	fp, r3, r1
 80025be:	4650      	mov	r0, sl
 80025c0:	4659      	mov	r1, fp
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	014b      	lsls	r3, r1, #5
 80025cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d0:	0142      	lsls	r2, r0, #5
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	ebb0 000a 	subs.w	r0, r0, sl
 80025da:	eb61 010b 	sbc.w	r1, r1, fp
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ec:	0182      	lsls	r2, r0, #6
 80025ee:	1a12      	subs	r2, r2, r0
 80025f0:	eb63 0301 	sbc.w	r3, r3, r1
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	00d9      	lsls	r1, r3, #3
 80025fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002602:	00d0      	lsls	r0, r2, #3
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	eb12 020a 	adds.w	r2, r2, sl
 800260c:	eb43 030b 	adc.w	r3, r3, fp
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	0299      	lsls	r1, r3, #10
 800261a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800261e:	0290      	lsls	r0, r2, #10
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	461a      	mov	r2, r3
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f7fd fde8 	bl	8000204 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4613      	mov	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	61bb      	str	r3, [r7, #24]
      break;
 8002656:	e0b2      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002658:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002660:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d04d      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	461a      	mov	r2, r3
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	ea02 0800 	and.w	r8, r2, r0
 8002686:	ea03 0901 	and.w	r9, r3, r1
 800268a:	4640      	mov	r0, r8
 800268c:	4649      	mov	r1, r9
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	014b      	lsls	r3, r1, #5
 8002698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800269c:	0142      	lsls	r2, r0, #5
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	ebb0 0008 	subs.w	r0, r0, r8
 80026a6:	eb61 0109 	sbc.w	r1, r1, r9
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026b8:	0182      	lsls	r2, r0, #6
 80026ba:	1a12      	subs	r2, r2, r0
 80026bc:	eb63 0301 	sbc.w	r3, r3, r1
 80026c0:	f04f 0000 	mov.w	r0, #0
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	00d9      	lsls	r1, r3, #3
 80026ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ce:	00d0      	lsls	r0, r2, #3
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	eb12 0208 	adds.w	r2, r2, r8
 80026d8:	eb43 0309 	adc.w	r3, r3, r9
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	0259      	lsls	r1, r3, #9
 80026e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026ea:	0250      	lsls	r0, r2, #9
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f7fd fd82 	bl	8000204 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e04a      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	461a      	mov	r2, r3
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	ea02 0400 	and.w	r4, r2, r0
 8002722:	ea03 0501 	and.w	r5, r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	014b      	lsls	r3, r1, #5
 8002734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002738:	0142      	lsls	r2, r0, #5
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	1b00      	subs	r0, r0, r4
 8002740:	eb61 0105 	sbc.w	r1, r1, r5
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	018b      	lsls	r3, r1, #6
 800274e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002752:	0182      	lsls	r2, r0, #6
 8002754:	1a12      	subs	r2, r2, r0
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	00d9      	lsls	r1, r3, #3
 8002764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002768:	00d0      	lsls	r0, r2, #3
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	1912      	adds	r2, r2, r4
 8002770:	eb45 0303 	adc.w	r3, r5, r3
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	0299      	lsls	r1, r3, #10
 800277e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002782:	0290      	lsls	r0, r2, #10
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	461a      	mov	r2, r3
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	f7fd fd36 	bl	8000204 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_GetSysClockFreq+0x358>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0f1b      	lsrs	r3, r3, #28
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	61bb      	str	r3, [r7, #24]
      break;
 80027b6:	e002      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027ba:	61bb      	str	r3, [r7, #24]
      break;
 80027bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027be:	69bb      	ldr	r3, [r7, #24]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	007a1200 	.word	0x007a1200

080027d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e28d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8083 	beq.w	80028fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027f8:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d019      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002804:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800280c:	2b08      	cmp	r3, #8
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002810:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4b8b      	ldr	r3, [pc, #556]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b84      	ldr	r3, [pc, #528]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x124>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e25a      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x90>
 800285a:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xb4>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fa64 	bl	8000d78 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fa60 	bl	8000d78 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e21f      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xdc>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fa50 	bl	8000d78 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fa4c 	bl	8000d78 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e20b      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x104>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d06f      	beq.n	80029ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d105      	bne.n	800292e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1d3      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe f9f9 	bl	8000d78 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe f9f5 	bl	8000d78 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1b4      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x278>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe f9d8 	bl	8000d78 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe f9d4 	bl	8000d78 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e193      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe f9b8 	bl	8000d78 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f9b4 	bl	8000d78 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e173      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x234>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f9a1 	bl	8000d78 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f99d 	bl	8000d78 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e15c      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b8a      	ldr	r3, [pc, #552]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b83      	ldr	r3, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a75      	ldr	r2, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f95d 	bl	8000d78 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe f959 	bl	8000d78 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e118      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x31e>
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x340>
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a59      	ldr	r2, [pc, #356]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe f91e 	bl	8000d78 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe f91a 	bl	8000d78 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0d7      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x368>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f908 	bl	8000d78 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f904 	bl	8000d78 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0c1      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80ad 	beq.w	8002d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d060      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d145      	bne.n	8002c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f8d8 	bl	8000d78 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe f8d4 	bl	8000d78 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e093      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe f8a9 	bl	8000d78 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe f8a5 	bl	8000d78 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e064      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x452>
 8002c48:	e05c      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe f892 	bl	8000d78 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f88e 	bl	8000d78 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
 8002c76:	e045      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e040      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_RCC_OscConfig+0x538>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d030      	beq.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d129      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d122      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d119      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d10f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e022      	b.n	8002d6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fd fd9f 	bl	800087c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f814 	bl	8002d74 <HAL_SD_InitCard>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00a      	b.n	8002d6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b08e      	sub	sp, #56	; 0x38
 8002d78:	af04      	add	r7, sp, #16
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d90:	2376      	movs	r3, #118	; 0x76
 8002d92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681d      	ldr	r5, [r3, #0]
 8002d98:	466c      	mov	r4, sp
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dac:	4628      	mov	r0, r5
 8002dae:	f002 f931 	bl	8005014 <SDIO_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e04c      	b.n	8002e5e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_SD_InitCard+0xf4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 f969 	bl	80050a6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_SD_InitCard+0xf4>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 ffee 	bl	8003dbc <SD_PowerON>
 8002de0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02e      	b.n	8002e5e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 ff0f 	bl	8003c24 <SD_InitCard>
 8002e06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e01b      	b.n	8002e5e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 f9cc 	bl	80051cc <SDMMC_CmdBlockLength>
 8002e34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00f      	beq.n	8002e5c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_SD_InitCard+0xf8>)
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	422580a0 	.word	0x422580a0
 8002e6c:	004005ff 	.word	0x004005ff

08002e70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0be      	b.n	8003016 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 80b7 	bne.w	8003014 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	441a      	add	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d907      	bls.n	8002eca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0a5      	b.n	8003016 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a4c      	ldr	r2, [pc, #304]	; (8003020 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002ef8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2200      	movs	r2, #0
 8002f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3380      	adds	r3, #128	; 0x80
 8002f30:	4619      	mov	r1, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	025b      	lsls	r3, r3, #9
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	f7fe f90d 	bl	8001158 <HAL_DMA_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e050      	b.n	8003016 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	025b      	lsls	r3, r3, #9
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	025b      	lsls	r3, r3, #9
 8002f92:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f94:	2390      	movs	r3, #144	; 0x90
 8002f96:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f107 0210 	add.w	r2, r7, #16
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 f8e0 	bl	8005174 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d90a      	bls.n	8002fd0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2282      	movs	r2, #130	; 0x82
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 f944 	bl	8005254 <SDMMC_CmdReadMultiBlock>
 8002fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fce:	e009      	b.n	8002fe4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2281      	movs	r2, #129	; 0x81
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 f917 	bl	8005210 <SDMMC_CmdReadSingleBlock>
 8002fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e002      	b.n	8003016 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3730      	adds	r7, #48	; 0x30
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08003a33 	.word	0x08003a33
 8003024:	08003aa5 	.word	0x08003aa5
 8003028:	004005ff 	.word	0x004005ff
 800302c:	4225858c 	.word	0x4225858c

08003030 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0c1      	b.n	80031dc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 80ba 	bne.w	80031da <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800306c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	441a      	add	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	429a      	cmp	r2, r3
 8003078:	d907      	bls.n	800308a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0a8      	b.n	80031dc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2203      	movs	r2, #3
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 021a 	orr.w	r2, r2, #26
 80030a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80030b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2200      	movs	r2, #0
 80030c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	025b      	lsls	r3, r3, #9
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d90a      	bls.n	80030ec <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	22a0      	movs	r2, #160	; 0xa0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 f8fa 	bl	80052dc <SDMMC_CmdWriteMultiBlock>
 80030e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80030ea:	e009      	b.n	8003100 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2290      	movs	r2, #144	; 0x90
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 f8cd 	bl	8005298 <SDMMC_CmdWriteSingleBlock>
 80030fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a38      	ldr	r2, [pc, #224]	; (80031ec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e057      	b.n	80031dc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800312c:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3380      	adds	r3, #128	; 0x80
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	025b      	lsls	r3, r3, #9
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	f7fd fff5 	bl	8001158 <HAL_DMA_Start_IT>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 021a 	bic.w	r2, r2, #26
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e018      	b.n	80031dc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031b6:	2390      	movs	r3, #144	; 0x90
 80031b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f107 0210 	add.w	r2, r7, #16
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 ffcf 	bl	8005174 <SDIO_ConfigData>

      return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3730      	adds	r7, #48	; 0x30
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	08003a09 	.word	0x08003a09
 80031e8:	08003aa5 	.word	0x08003aa5
 80031ec:	004005ff 	.word	0x004005ff
 80031f0:	4225858c 	.word	0x4225858c

080031f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_SD_IRQHandler+0x2e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 ffed 	bl	80041fa <SD_Read_IT>
 8003220:	e155      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 808f 	beq.w	8003350 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800324a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800324e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d039      	beq.n	80032de <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_SD_IRQHandler+0x8a>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d011      	beq.n	80032a2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f002 f84c 	bl	8005320 <SDMMC_CmdStopTransfer>
 8003288:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f91f 	bl	80034e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <HAL_SD_IRQHandler+0xda>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f002 fcb2 	bl	8005c38 <HAL_SD_RxCpltCallback>
 80032d4:	e0fb      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f002 fca4 	bl	8005c24 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032dc:	e0f7      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80f2 	beq.w	80034ce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 f811 	bl	8005320 <SDMMC_CmdStopTransfer>
 80032fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8e4 	bl	80034e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 80d5 	bne.w	80034ce <HAL_SD_IRQHandler+0x2da>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 80cf 	bne.w	80034ce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0208 	bic.w	r2, r2, #8
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f002 fc6b 	bl	8005c24 <HAL_SD_TxCpltCallback>
}
 800334e:	e0be      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_SD_IRQHandler+0x17c>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 ff97 	bl	800429c <SD_Write_IT>
 800336e:	e0ae      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a7 	beq.w	80034ce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	f043 0208 	orr.w	r2, r3, #8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f001 ff8a 	bl	8005320 <SDMMC_CmdStopTransfer>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f855 	bl	80034e0 <HAL_SD_ErrorCallback>
}
 8003436:	e04a      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d045      	beq.n	80034ce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_SD_IRQHandler+0x262>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d011      	beq.n	800347a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_SD_IRQHandler+0x2e4>)
 800345c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd ff40 	bl	80012e8 <HAL_DMA_Abort_IT>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02f      	beq.n	80034ce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb68 	bl	8003b48 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003478:	e029      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_SD_IRQHandler+0x29a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_SD_IRQHandler+0x2e8>)
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd ff24 	bl	80012e8 <HAL_DMA_Abort_IT>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d013      	beq.n	80034ce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb83 	bl	8003bb6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80034b0:	e00d      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f002 fba2 	bl	8005c10 <HAL_SD_AbortCallback>
}
 80034cc:	e7ff      	b.n	80034ce <HAL_SD_IRQHandler+0x2da>
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	08003b49 	.word	0x08003b49
 80034dc:	08003bb7 	.word	0x08003bb7

080034e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003502:	0f9b      	lsrs	r3, r3, #30
 8003504:	b2da      	uxtb	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	b2da      	uxtb	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003520:	0e1b      	lsrs	r3, r3, #24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	b2da      	uxtb	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2da      	uxtb	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b2da      	uxtb	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003554:	0d1b      	lsrs	r3, r3, #20
 8003556:	b29a      	uxth	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003572:	0bdb      	lsrs	r3, r3, #15
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003584:	0b9b      	lsrs	r3, r3, #14
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a8:	0b1b      	lsrs	r3, r3, #12
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d163      	bne.n	800368c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c8:	009a      	lsls	r2, r3, #2
 80035ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80035d4:	0f92      	lsrs	r2, r2, #30
 80035d6:	431a      	orrs	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e0:	0edb      	lsrs	r3, r3, #27
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f2:	0e1b      	lsrs	r3, r3, #24
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003604:	0d5b      	lsrs	r3, r3, #21
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	b2da      	uxtb	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	0c9b      	lsrs	r3, r3, #18
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	0bdb      	lsrs	r3, r3, #15
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	b2da      	uxtb	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	7e1b      	ldrb	r3, [r3, #24]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	3302      	adds	r3, #2
 800364c:	2201      	movs	r2, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003656:	fb02 f203 	mul.w	r2, r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	7a1b      	ldrb	r3, [r3, #8]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2201      	movs	r2, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003678:	0a52      	lsrs	r2, r2, #9
 800367a:	fb02 f203 	mul.w	r2, r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
 800368a:	e031      	b.n	80036f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	2b01      	cmp	r3, #1
 8003692:	d11d      	bne.n	80036d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a2:	0c1b      	lsrs	r3, r3, #16
 80036a4:	431a      	orrs	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	3301      	adds	r3, #1
 80036b0:	029a      	lsls	r2, r3, #10
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
 80036ce:	e00f      	b.n	80036f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_SD_GetCardCSD+0x344>)
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e09d      	b.n	800382c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	0b9b      	lsrs	r3, r3, #14
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003706:	09db      	lsrs	r3, r3, #7
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370e:	b2da      	uxtb	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	0fdb      	lsrs	r3, r3, #31
 800372a:	b2da      	uxtb	r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	0f5b      	lsrs	r3, r3, #29
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	b2da      	uxtb	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	b2da      	uxtb	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	0d9b      	lsrs	r3, r3, #22
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	0d5b      	lsrs	r3, r3, #21
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	0bdb      	lsrs	r3, r3, #15
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	0b9b      	lsrs	r3, r3, #14
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	0b1b      	lsrs	r3, r3, #12
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	0a9b      	lsrs	r3, r3, #10
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	004005ff 	.word	0x004005ff

0800383c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b08e      	sub	sp, #56	; 0x38
 8003898:	af04      	add	r7, sp, #16
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d02e      	beq.n	8003912 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d106      	bne.n	80038ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
 80038c8:	e029      	b.n	800391e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d0:	d10a      	bne.n	80038e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb28 	bl	8003f28 <SD_WideBus_Enable>
 80038d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
 80038e6:	e01a      	b.n	800391e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fb65 	bl	8003fbe <SD_WideBus_Disable>
 80038f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
 8003902:	e00c      	b.n	800391e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
 8003910:	e005      	b.n	800391e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800393c:	e01f      	b.n	800397e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681d      	ldr	r5, [r3, #0]
 8003964:	466c      	mov	r4, sp
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800396e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003978:	4628      	mov	r0, r5
 800397a:	f001 fb4b 	bl	8005014 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fc20 	bl	80051cc <SDMMC_CmdBlockLength>
 800398c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80039b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	004005ff 	.word	0x004005ff

080039c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa7c 	bl	8003ed8 <SD_SendStatus>
 80039e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80039fe:	693b      	ldr	r3, [r7, #16]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b82      	cmp	r3, #130	; 0x82
 8003a46:	d111      	bne.n	8003a6c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 fc67 	bl	8005320 <SDMMC_CmdStopTransfer>
 8003a52:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff fd3a 	bl	80034e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0208 	bic.w	r2, r2, #8
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f002 f8cf 	bl	8005c38 <HAL_SD_RxCpltCallback>
#endif
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fdc4 	bl	8001640 <HAL_DMA_GetError>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d03e      	beq.n	8003b3c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d002      	beq.n	8003ada <SD_DMAError+0x36>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12d      	bne.n	8003b36 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <SD_DMAError+0xa0>)
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f7ff ff62 	bl	80039c8 <HAL_SD_GetCardState>
 8003b04:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d002      	beq.n	8003b12 <SD_DMAError+0x6e>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10a      	bne.n	8003b28 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fc02 	bl	8005320 <SDMMC_CmdStopTransfer>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff fcd2 	bl	80034e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	004005ff 	.word	0x004005ff

08003b48 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff31 	bl	80039c8 <HAL_SD_GetCardState>
 8003b66:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d002      	beq.n	8003b82 <SD_DMATxAbort+0x3a>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d10a      	bne.n	8003b98 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fbca 	bl	8005320 <SDMMC_CmdStopTransfer>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f002 f835 	bl	8005c10 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003ba6:	e002      	b.n	8003bae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fc99 	bl	80034e0 <HAL_SD_ErrorCallback>
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fefa 	bl	80039c8 <HAL_SD_GetCardState>
 8003bd4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d002      	beq.n	8003bf0 <SD_DMARxAbort+0x3a>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10a      	bne.n	8003c06 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 fb93 	bl	8005320 <SDMMC_CmdStopTransfer>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f001 fffe 	bl	8005c10 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c14:	e002      	b.n	8003c1c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff fc62 	bl	80034e0 <HAL_SD_ErrorCallback>
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b094      	sub	sp, #80	; 0x50
 8003c28:	af04      	add	r7, sp, #16
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fa45 	bl	80050c4 <SDIO_GetPowerState>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c44:	e0b6      	b.n	8003db4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d02f      	beq.n	8003cae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fc6e 	bl	8005534 <SDMMC_CmdSendCID>
 8003c58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <SD_InitCard+0x40>
    {
      return errorstate;
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	e0a7      	b.n	8003db4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 fa6f 	bl	800514e <SDIO_GetResponse>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fa66 	bl	800514e <SDIO_GetResponse>
 8003c82:	4602      	mov	r2, r0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fa5d 	bl	800514e <SDIO_GetResponse>
 8003c94:	4602      	mov	r2, r0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	210c      	movs	r1, #12
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fa54 	bl	800514e <SDIO_GetResponse>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d00d      	beq.n	8003cd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f107 020e 	add.w	r2, r7, #14
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fc74 	bl	80055ae <SDMMC_CmdSetRelAdd>
 8003cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	e070      	b.n	8003db4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d036      	beq.n	8003d48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f001 fc3e 	bl	8005570 <SDMMC_CmdSendCSD>
 8003cf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfe:	e059      	b.n	8003db4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fa21 	bl	800514e <SDIO_GetResponse>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2104      	movs	r1, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fa18 	bl	800514e <SDIO_GetResponse>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2108      	movs	r1, #8
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fa0f 	bl	800514e <SDIO_GetResponse>
 8003d30:	4602      	mov	r2, r0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	210c      	movs	r1, #12
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fa06 	bl	800514e <SDIO_GetResponse>
 8003d42:	4602      	mov	r2, r0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f9fd 	bl	800514e <SDIO_GetResponse>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0d1a      	lsrs	r2, r3, #20
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d5c:	f107 0310 	add.w	r3, r7, #16
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fbc6 	bl	80034f4 <HAL_SD_GetCardCSD>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d72:	e01f      	b.n	8003db4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	4608      	mov	r0, r1
 8003d86:	f001 faed 	bl	8005364 <SDMMC_CmdSelDesel>
 8003d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <SD_InitCard+0x172>
  {
    return errorstate;
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	e00e      	b.n	8003db4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681d      	ldr	r5, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	466c      	mov	r4, sp
 8003d9e:	f103 0210 	add.w	r2, r3, #16
 8003da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003da4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003da8:	3304      	adds	r3, #4
 8003daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dac:	4628      	mov	r0, r5
 8003dae:	f001 f931 	bl	8005014 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3740      	adds	r7, #64	; 0x40
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bdb0      	pop	{r4, r5, r7, pc}

08003dbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fae8 	bl	80053aa <SDMMC_CmdGoIdleState>
 8003dda:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	e072      	b.n	8003ecc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fafb 	bl	80053e6 <SDMMC_CmdOperCond>
 8003df0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fad1 	bl	80053aa <SDMMC_CmdGoIdleState>
 8003e08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	e05b      	b.n	8003ecc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d137      	bne.n	8003e92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fafb 	bl	8005424 <SDMMC_CmdAppCommand>
 8003e2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02d      	beq.n	8003e92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e3a:	e047      	b.n	8003ecc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 faee 	bl	8005424 <SDMMC_CmdAppCommand>
 8003e48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <SD_PowerON+0x98>
    {
      return errorstate;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	e03b      	b.n	8003ecc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	491e      	ldr	r1, [pc, #120]	; (8003ed4 <SD_PowerON+0x118>)
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fb04 	bl	8005468 <SDMMC_CmdAppOperCommand>
 8003e60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e6c:	e02e      	b.n	8003ecc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f96a 	bl	800514e <SDIO_GetResponse>
 8003e7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	0fdb      	lsrs	r3, r3, #31
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <SD_PowerON+0xcc>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <SD_PowerON+0xce>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]

    count++;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d802      	bhi.n	8003ea2 <SD_PowerON+0xe6>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0cc      	beq.n	8003e3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d902      	bls.n	8003eb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb0:	e00c      	b.n	8003ecc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ec2:	e002      	b.n	8003eca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	c1100000 	.word	0xc1100000

08003ed8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eec:	e018      	b.n	8003f20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f001 fb78 	bl	80055f0 <SDMMC_CmdSendStatus>
 8003f00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e009      	b.n	8003f20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f91b 	bl	800514e <SDIO_GetResponse>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f905 	bl	800514e <SDIO_GetResponse>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4e:	d102      	bne.n	8003f56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f54:	e02f      	b.n	8003fb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f879 	bl	8004054 <SD_FindSCR>
 8003f62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	e023      	b.n	8003fb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f001 fa4d 	bl	8005424 <SDMMC_CmdAppCommand>
 8003f8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	e00f      	b.n	8003fb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fa86 	bl	80054ae <SDMMC_CmdBusWidth>
 8003fa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	e003      	b.n	8003fb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e001      	b.n	8003fb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f8ba 	bl	800514e <SDIO_GetResponse>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe4:	d102      	bne.n	8003fec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fea:	e02f      	b.n	800404c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f82e 	bl	8004054 <SD_FindSCR>
 8003ff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e023      	b.n	800404c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01c      	beq.n	8004048 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f001 fa02 	bl	8005424 <SDMMC_CmdAppCommand>
 8004020:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	e00f      	b.n	800404c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fa3b 	bl	80054ae <SDMMC_CmdBusWidth>
 8004038:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	e003      	b.n	800404c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004044:	2300      	movs	r3, #0
 8004046:	e001      	b.n	800404c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b08f      	sub	sp, #60	; 0x3c
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7fc fe8b 	bl	8000d78 <HAL_GetTick>
 8004062:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2108      	movs	r1, #8
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f8a6 	bl	80051cc <SDMMC_CmdBlockLength>
 8004080:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	e0b2      	b.n	80041f2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f001 f9c3 	bl	8005424 <SDMMC_CmdAppCommand>
 800409e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	e0a3      	b.n	80041f2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80040b0:	2308      	movs	r3, #8
 80040b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80040b4:	2330      	movs	r3, #48	; 0x30
 80040b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80040b8:	2302      	movs	r3, #2
 80040ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f107 0210 	add.w	r2, r7, #16
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f850 	bl	8005174 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fa0a 	bl	80054f2 <SDMMC_CmdSendSCR>
 80040de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02a      	beq.n	800413c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	e083      	b.n	80041f2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00f      	beq.n	8004118 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f107 0208 	add.w	r2, r7, #8
 8004104:	18d4      	adds	r4, r2, r3
 8004106:	4608      	mov	r0, r1
 8004108:	f000 ffaf 	bl	800506a <SDIO_ReadFIFO>
 800410c:	4603      	mov	r3, r0
 800410e:	6023      	str	r3, [r4, #0]
      index++;
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	3301      	adds	r3, #1
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	e006      	b.n	8004126 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d012      	beq.n	800414c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004126:	f7fc fe27 	bl	8000d78 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004136:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800413a:	e05a      	b.n	80041f2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0cf      	beq.n	80040ea <SD_FindSCR+0x96>
 800414a:	e000      	b.n	800414e <SD_FindSCR+0xfa>
      break;
 800414c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004164:	2308      	movs	r3, #8
 8004166:	e044      	b.n	80041f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2202      	movs	r2, #2
 800417c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800417e:	2302      	movs	r3, #2
 8004180:	e037      	b.n	80041f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004198:	2320      	movs	r3, #32
 800419a:	e02a      	b.n	80041f2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	061a      	lsls	r2, r3, #24
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	601a      	str	r2, [r3, #0]
    scr++;
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	3304      	adds	r3, #4
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	061a      	lsls	r2, r3, #24
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	373c      	adds	r7, #60	; 0x3c
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd90      	pop	{r4, r7, pc}

080041fa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03f      	beq.n	8004294 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e033      	b.n	8004282 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 ff23 	bl	800506a <SDIO_ReadFIFO>
 8004224:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3b01      	subs	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3b01      	subs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	701a      	strb	r2, [r3, #0]
      tmp++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3b01      	subs	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	0e1b      	lsrs	r3, r3, #24
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3b01      	subs	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b07      	cmp	r3, #7
 8004286:	d9c8      	bls.n	800421a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004294:	bf00      	nop
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d043      	beq.n	800433e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e037      	b.n	800432c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	041a      	lsls	r2, r3, #16
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]
      tmp++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3b01      	subs	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f107 0208 	add.w	r2, r7, #8
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 feaf 	bl	8005084 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b07      	cmp	r3, #7
 8004330:	d9c4      	bls.n	80042bc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e03f      	b.n	80043d8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fc fbb3 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	; 0x24
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004388:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fc7a 	bl	8004c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b0ba      	sub	sp, #232	; 0xe8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_UART_IRQHandler+0x66>
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb65 	bl	8004b0e <UART_Receive_IT>
      return;
 8004444:	e256      	b.n	80048f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80de 	beq.w	800460c <HAL_UART_IRQHandler+0x22c>
 8004450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80d1 	beq.w	800460c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_UART_IRQHandler+0xae>
 8004476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_UART_IRQHandler+0xd2>
 800449a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_UART_IRQHandler+0xf6>
 80044be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0204 	orr.w	r2, r3, #4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d011      	beq.n	8004506 <HAL_UART_IRQHandler+0x126>
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0208 	orr.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 81ed 	beq.w	80048ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_UART_IRQHandler+0x14e>
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 faf0 	bl	8004b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_UART_IRQHandler+0x17a>
 8004552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d04f      	beq.n	80045fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9f8 	bl	8004950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d141      	bne.n	80045f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800459a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800459e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1d9      	bne.n	800456e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	4a7d      	ldr	r2, [pc, #500]	; (80047bc <HAL_UART_IRQHandler+0x3dc>)
 80045c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fe8a 	bl	80012e8 <HAL_DMA_Abort_IT>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e4:	4610      	mov	r0, r2
 80045e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e00e      	b.n	8004608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f99a 	bl	8004924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	e00a      	b.n	8004608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f996 	bl	8004924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	e006      	b.n	8004608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f992 	bl	8004924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004606:	e170      	b.n	80048ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	bf00      	nop
    return;
 800460a:	e16e      	b.n	80048ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	2b01      	cmp	r3, #1
 8004612:	f040 814a 	bne.w	80048aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8143 	beq.w	80048aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 813c 	beq.w	80048aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	f040 80b4 	bne.w	80047c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8140 	beq.w	80048ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004676:	429a      	cmp	r2, r3
 8004678:	f080 8139 	bcs.w	80048ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004682:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	f000 8088 	beq.w	80047a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1d9      	bne.n	8004692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004706:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800470a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e1      	bne.n	80046de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800472a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800473e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800474c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e3      	bne.n	800471a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	f023 0310 	bic.w	r3, r3, #16
 8004776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004784:	65ba      	str	r2, [r7, #88]	; 0x58
 8004786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800478a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e3      	bne.n	8004760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	4618      	mov	r0, r3
 800479e:	f7fc fd33 	bl	8001208 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8c0 	bl	8004938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b8:	e099      	b.n	80048ee <HAL_UART_IRQHandler+0x50e>
 80047ba:	bf00      	nop
 80047bc:	08004a17 	.word	0x08004a17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 808b 	beq.w	80048f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8086 	beq.w	80048f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800480a:	647a      	str	r2, [r7, #68]	; 0x44
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	623b      	str	r3, [r7, #32]
   return(result);
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004842:	633a      	str	r2, [r7, #48]	; 0x30
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e3      	bne.n	800481e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60fb      	str	r3, [r7, #12]
   return(result);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	617b      	str	r3, [r7, #20]
   return(result);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e3      	bne.n	8004864 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800489c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f848 	bl	8004938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048a8:	e023      	b.n	80048f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_UART_IRQHandler+0x4ea>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8bb 	bl	8004a3e <UART_Transmit_IT>
    return;
 80048c8:	e014      	b.n	80048f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00e      	beq.n	80048f4 <HAL_UART_IRQHandler+0x514>
 80048d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8fb 	bl	8004ade <UART_EndTransmit_IT>
    return;
 80048e8:	e004      	b.n	80048f4 <HAL_UART_IRQHandler+0x514>
    return;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <HAL_UART_IRQHandler+0x514>
      return;
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <HAL_UART_IRQHandler+0x514>
      return;
 80048f2:	bf00      	nop
  }
}
 80048f4:	37e8      	adds	r7, #232	; 0xe8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop

080048fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b095      	sub	sp, #84	; 0x54
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004978:	643a      	str	r2, [r7, #64]	; 0x40
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800497e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	61fb      	str	r3, [r7, #28]
   return(result);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d119      	bne.n	80049fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0310 	bic.w	r3, r3, #16
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e8:	61ba      	str	r2, [r7, #24]
 80049ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a0a:	bf00      	nop
 8004a0c:	3754      	adds	r7, #84	; 0x54
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff ff77 	bl	8004924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b21      	cmp	r3, #33	; 0x21
 8004a50:	d13e      	bne.n	8004ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d114      	bne.n	8004a86 <UART_Transmit_IT+0x48>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d110      	bne.n	8004a86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	621a      	str	r2, [r3, #32]
 8004a84:	e008      	b.n	8004a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6211      	str	r1, [r2, #32]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10f      	bne.n	8004acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fefc 	bl	80048fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08c      	sub	sp, #48	; 0x30
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b22      	cmp	r3, #34	; 0x22
 8004b20:	f040 80ab 	bne.w	8004c7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	d117      	bne.n	8004b5e <UART_Receive_IT+0x50>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d113      	bne.n	8004b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b5c:	e026      	b.n	8004bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d007      	beq.n	8004b82 <UART_Receive_IT+0x74>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <UART_Receive_IT+0x82>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e008      	b.n	8004ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d15a      	bne.n	8004c76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0220 	bic.w	r2, r2, #32
 8004bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d135      	bne.n	8004c6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	613b      	str	r3, [r7, #16]
   return(result);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f023 0310 	bic.w	r3, r3, #16
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	623a      	str	r2, [r7, #32]
 8004c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	69f9      	ldr	r1, [r7, #28]
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d10a      	bne.n	8004c5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fe67 	bl	8004938 <HAL_UARTEx_RxEventCallback>
 8004c6a:	e002      	b.n	8004c72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fe4f 	bl	8004910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e002      	b.n	8004c7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3730      	adds	r7, #48	; 0x30
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	b09f      	sub	sp, #124	; 0x7c
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9a:	68d9      	ldr	r1, [r3, #12]
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	ea40 0301 	orr.w	r3, r0, r1
 8004ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cc8:	f021 010c 	bic.w	r1, r1, #12
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	6999      	ldr	r1, [r3, #24]
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	ea40 0301 	orr.w	r3, r0, r1
 8004cec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4bc5      	ldr	r3, [pc, #788]	; (8005008 <UART_SetConfig+0x384>)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d004      	beq.n	8004d02 <UART_SetConfig+0x7e>
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4bc3      	ldr	r3, [pc, #780]	; (800500c <UART_SetConfig+0x388>)
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d103      	bne.n	8004d0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d02:	f7fd f879 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8004d06:	6778      	str	r0, [r7, #116]	; 0x74
 8004d08:	e002      	b.n	8004d10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d0a:	f7fd f861 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8004d0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d18:	f040 80b6 	bne.w	8004e88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1e:	461c      	mov	r4, r3
 8004d20:	f04f 0500 	mov.w	r5, #0
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	1891      	adds	r1, r2, r2
 8004d2a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d2c:	415b      	adcs	r3, r3
 8004d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d34:	1912      	adds	r2, r2, r4
 8004d36:	eb45 0303 	adc.w	r3, r5, r3
 8004d3a:	f04f 0000 	mov.w	r0, #0
 8004d3e:	f04f 0100 	mov.w	r1, #0
 8004d42:	00d9      	lsls	r1, r3, #3
 8004d44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d48:	00d0      	lsls	r0, r2, #3
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	1911      	adds	r1, r2, r4
 8004d50:	6639      	str	r1, [r7, #96]	; 0x60
 8004d52:	416b      	adcs	r3, r5
 8004d54:	667b      	str	r3, [r7, #100]	; 0x64
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d64:	415b      	adcs	r3, r3
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d70:	f7fb fa48 	bl	8000204 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4ba5      	ldr	r3, [pc, #660]	; (8005010 <UART_SetConfig+0x38c>)
 8004d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	011e      	lsls	r6, r3, #4
 8004d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d84:	461c      	mov	r4, r3
 8004d86:	f04f 0500 	mov.w	r5, #0
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	6339      	str	r1, [r7, #48]	; 0x30
 8004d92:	415b      	adcs	r3, r3
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
 8004d96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d9a:	1912      	adds	r2, r2, r4
 8004d9c:	eb45 0303 	adc.w	r3, r5, r3
 8004da0:	f04f 0000 	mov.w	r0, #0
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	00d9      	lsls	r1, r3, #3
 8004daa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dae:	00d0      	lsls	r0, r2, #3
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	1911      	adds	r1, r2, r4
 8004db6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004db8:	416b      	adcs	r3, r5
 8004dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dd6:	f7fb fa15 	bl	8000204 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4b8c      	ldr	r3, [pc, #560]	; (8005010 <UART_SetConfig+0x38c>)
 8004de0:	fba3 1302 	umull	r1, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2164      	movs	r1, #100	; 0x64
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3332      	adds	r3, #50	; 0x32
 8004df2:	4a87      	ldr	r2, [pc, #540]	; (8005010 <UART_SetConfig+0x38c>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e00:	441e      	add	r6, r3
 8004e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e04:	4618      	mov	r0, r3
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	1894      	adds	r4, r2, r2
 8004e10:	623c      	str	r4, [r7, #32]
 8004e12:	415b      	adcs	r3, r3
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1a:	1812      	adds	r2, r2, r0
 8004e1c:	eb41 0303 	adc.w	r3, r1, r3
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	f04f 0500 	mov.w	r5, #0
 8004e28:	00dd      	lsls	r5, r3, #3
 8004e2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e2e:	00d4      	lsls	r4, r2, #3
 8004e30:	4622      	mov	r2, r4
 8004e32:	462b      	mov	r3, r5
 8004e34:	1814      	adds	r4, r2, r0
 8004e36:	653c      	str	r4, [r7, #80]	; 0x50
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	61b9      	str	r1, [r7, #24]
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e56:	f7fb f9d5 	bl	8000204 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <UART_SetConfig+0x38c>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	2164      	movs	r1, #100	; 0x64
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	3332      	adds	r3, #50	; 0x32
 8004e72:	4a67      	ldr	r2, [pc, #412]	; (8005010 <UART_SetConfig+0x38c>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	f003 0207 	and.w	r2, r3, #7
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4432      	add	r2, r6
 8004e84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e86:	e0b9      	b.n	8004ffc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8a:	461c      	mov	r4, r3
 8004e8c:	f04f 0500 	mov.w	r5, #0
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	6139      	str	r1, [r7, #16]
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ea0:	1912      	adds	r2, r2, r4
 8004ea2:	eb45 0303 	adc.w	r3, r5, r3
 8004ea6:	f04f 0000 	mov.w	r0, #0
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	00d9      	lsls	r1, r3, #3
 8004eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eb4:	00d0      	lsls	r0, r2, #3
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	eb12 0804 	adds.w	r8, r2, r4
 8004ebe:	eb43 0905 	adc.w	r9, r3, r5
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	008b      	lsls	r3, r1, #2
 8004ed6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eda:	0082      	lsls	r2, r0, #2
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	f7fb f990 	bl	8000204 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b49      	ldr	r3, [pc, #292]	; (8005010 <UART_SetConfig+0x38c>)
 8004eea:	fba3 2302 	umull	r2, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	011e      	lsls	r6, r3, #4
 8004ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f04f 0100 	mov.w	r1, #0
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	1894      	adds	r4, r2, r2
 8004f00:	60bc      	str	r4, [r7, #8]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f0a:	1812      	adds	r2, r2, r0
 8004f0c:	eb41 0303 	adc.w	r3, r1, r3
 8004f10:	f04f 0400 	mov.w	r4, #0
 8004f14:	f04f 0500 	mov.w	r5, #0
 8004f18:	00dd      	lsls	r5, r3, #3
 8004f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f1e:	00d4      	lsls	r4, r2, #3
 8004f20:	4622      	mov	r2, r4
 8004f22:	462b      	mov	r3, r5
 8004f24:	1814      	adds	r4, r2, r0
 8004f26:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f04f 0100 	mov.w	r1, #0
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	008b      	lsls	r3, r1, #2
 8004f40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f44:	0082      	lsls	r2, r0, #2
 8004f46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f4a:	f7fb f95b 	bl	8000204 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <UART_SetConfig+0x38c>)
 8004f54:	fba3 1302 	umull	r1, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	2164      	movs	r1, #100	; 0x64
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	3332      	adds	r3, #50	; 0x32
 8004f66:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <UART_SetConfig+0x38c>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f72:	441e      	add	r6, r3
 8004f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f76:	4618      	mov	r0, r3
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	1894      	adds	r4, r2, r2
 8004f82:	603c      	str	r4, [r7, #0]
 8004f84:	415b      	adcs	r3, r3
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8c:	1812      	adds	r2, r2, r0
 8004f8e:	eb41 0303 	adc.w	r3, r1, r3
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	f04f 0500 	mov.w	r5, #0
 8004f9a:	00dd      	lsls	r5, r3, #3
 8004f9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fa0:	00d4      	lsls	r4, r2, #3
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	eb12 0a00 	adds.w	sl, r2, r0
 8004faa:	eb43 0b01 	adc.w	fp, r3, r1
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fc6:	0082      	lsls	r2, r0, #2
 8004fc8:	4650      	mov	r0, sl
 8004fca:	4659      	mov	r1, fp
 8004fcc:	f7fb f91a 	bl	8000204 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <UART_SetConfig+0x38c>)
 8004fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2164      	movs	r1, #100	; 0x64
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	; 0x32
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <UART_SetConfig+0x38c>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4432      	add	r2, r6
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	377c      	adds	r7, #124	; 0x7c
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005006:	bf00      	nop
 8005008:	40011000 	.word	0x40011000
 800500c:	40011400 	.word	0x40011400
 8005010:	51eb851f 	.word	0x51eb851f

08005014 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 001c 	add.w	r0, r7, #28
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800502a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800502c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800502e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005032:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005036:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800503a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800503e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800504e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr

0800506a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2203      	movs	r2, #3
 80050b2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80050b4:	2002      	movs	r0, #2
 80050b6:	f7fb fe6b 	bl	8000d90 <HAL_Delay>
  
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0303 	and.w	r3, r3, #3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005104:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800510a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	b2db      	uxtb	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3314      	adds	r3, #20
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4413      	add	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
}  
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800519a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0

}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051da:	2310      	movs	r3, #16
 80051dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051de:	2340      	movs	r3, #64	; 0x40
 80051e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff74 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	2110      	movs	r1, #16
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa44 	bl	800568c <SDMMC_GetCmdResp1>
 8005204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005206:	69fb      	ldr	r3, [r7, #28]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800521e:	2311      	movs	r3, #17
 8005220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005222:	2340      	movs	r3, #64	; 0x40
 8005224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff52 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	2111      	movs	r1, #17
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa22 	bl	800568c <SDMMC_GetCmdResp1>
 8005248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524a:	69fb      	ldr	r3, [r7, #28]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005262:	2312      	movs	r3, #18
 8005264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800526e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff ff30 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	2112      	movs	r1, #18
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa00 	bl	800568c <SDMMC_GetCmdResp1>
 800528c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052a6:	2318      	movs	r3, #24
 80052a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff0e 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	2118      	movs	r1, #24
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9de 	bl	800568c <SDMMC_GetCmdResp1>
 80052d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d2:	69fb      	ldr	r3, [r7, #28]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80052ea:	2319      	movs	r3, #25
 80052ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ee:	2340      	movs	r3, #64	; 0x40
 80052f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052fc:	f107 0308 	add.w	r3, r7, #8
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff feec 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	2119      	movs	r1, #25
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f9bc 	bl	800568c <SDMMC_GetCmdResp1>
 8005314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005316:	69fb      	ldr	r3, [r7, #28]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800532c:	230c      	movs	r3, #12
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fecb 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <SDMMC_CmdStopTransfer+0x40>)
 800534c:	210c      	movs	r1, #12
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f99c 	bl	800568c <SDMMC_GetCmdResp1>
 8005354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005356:	69fb      	ldr	r3, [r7, #28]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	05f5e100 	.word	0x05f5e100

08005364 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005374:	2307      	movs	r3, #7
 8005376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005384:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	4619      	mov	r1, r3
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fea7 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	2107      	movs	r1, #7
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f977 	bl	800568c <SDMMC_GetCmdResp1>
 800539e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b088      	sub	sp, #32
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fe86 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f92d 	bl	8005634 <SDMMC_GetCmdError>
 80053da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b088      	sub	sp, #32
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80053ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80053f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80053f4:	2308      	movs	r3, #8
 80053f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005404:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe67 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb24 	bl	8005a60 <SDMMC_GetCmdResp7>
 8005418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005432:	2337      	movs	r3, #55	; 0x37
 8005434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800543e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005442:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fe48 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	2137      	movs	r1, #55	; 0x37
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f918 	bl	800568c <SDMMC_GetCmdResp1>
 800545c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800545e:	69fb      	ldr	r3, [r7, #28]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800547e:	2329      	movs	r3, #41	; 0x29
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fe22 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa2b 	bl	80058f8 <SDMMC_GetCmdResp3>
 80054a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b088      	sub	sp, #32
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80054bc:	2306      	movs	r3, #6
 80054be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe03 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	2106      	movs	r1, #6
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8d3 	bl	800568c <SDMMC_GetCmdResp1>
 80054e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054e8:	69fb      	ldr	r3, [r7, #28]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b088      	sub	sp, #32
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80054fe:	2333      	movs	r3, #51	; 0x33
 8005500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800550a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fde2 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	2133      	movs	r1, #51	; 0x33
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8b2 	bl	800568c <SDMMC_GetCmdResp1>
 8005528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552a:	69fb      	ldr	r3, [r7, #28]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005540:	2302      	movs	r3, #2
 8005542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005544:	23c0      	movs	r3, #192	; 0xc0
 8005546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800554c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005550:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fdc1 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f982 	bl	8005868 <SDMMC_GetCmdResp2>
 8005564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005566:	69fb      	ldr	r3, [r7, #28]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800557e:	2309      	movs	r3, #9
 8005580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005582:	23c0      	movs	r3, #192	; 0xc0
 8005584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800558a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005590:	f107 0308 	add.w	r3, r7, #8
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fda2 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f963 	bl	8005868 <SDMMC_GetCmdResp2>
 80055a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80055bc:	2303      	movs	r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fd83 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	2103      	movs	r1, #3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9c8 	bl	8005974 <SDMMC_GetCmdResp6>
 80055e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055e6:	69fb      	ldr	r3, [r7, #28]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80055fe:	230d      	movs	r3, #13
 8005600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800560a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fd62 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	210d      	movs	r1, #13
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f832 	bl	800568c <SDMMC_GetCmdResp1>
 8005628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800562a:	69fb      	ldr	r3, [r7, #28]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <SDMMC_GetCmdError+0x50>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a11      	ldr	r2, [pc, #68]	; (8005688 <SDMMC_GetCmdError+0x54>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0a5b      	lsrs	r3, r3, #9
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	60fa      	str	r2, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800565c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005660:	e009      	b.n	8005676 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f1      	beq.n	8005652 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	22c5      	movs	r2, #197	; 0xc5
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000000 	.word	0x20000000
 8005688:	10624dd3 	.word	0x10624dd3

0800568c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	460b      	mov	r3, r1
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800569a:	4b70      	ldr	r3, [pc, #448]	; (800585c <SDMMC_GetCmdResp1+0x1d0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a70      	ldr	r2, [pc, #448]	; (8005860 <SDMMC_GetCmdResp1+0x1d4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	0a5a      	lsrs	r2, r3, #9
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	1e5a      	subs	r2, r3, #1
 80056b2:	61fa      	str	r2, [r7, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056bc:	e0c9      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ef      	beq.n	80056ae <SDMMC_GetCmdResp1+0x22>
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ea      	bne.n	80056ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2204      	movs	r2, #4
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056ea:	2304      	movs	r3, #4
 80056ec:	e0b1      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005700:	2301      	movs	r3, #1
 8005702:	e0a6      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	22c5      	movs	r2, #197	; 0xc5
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fd12 	bl	8005134 <SDIO_GetCommandResponse>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	4293      	cmp	r3, r2
 8005718:	d001      	beq.n	800571e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800571a:	2301      	movs	r3, #1
 800571c:	e099      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800571e:	2100      	movs	r1, #0
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fd14 	bl	800514e <SDIO_GetResponse>
 8005726:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <SDMMC_GetCmdResp1+0x1d8>)
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
 8005734:	e08d      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	da02      	bge.n	8005742 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800573c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005740:	e087      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	e080      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	e079      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576c:	e071      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577c:	e069      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578c:	e061      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800579c:	e059      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ac:	e051      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057bc:	e049      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80057c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057cc:	e041      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80057d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057dc:	e039      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80057e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ec:	e031      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80057f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057fc:	e029      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005808:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800580c:	e021      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800581c:	e019      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800582c:	e011      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800583c:	e009      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005848:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800584c:	e001      	b.n	8005852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800584e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000000 	.word	0x20000000
 8005860:	10624dd3 	.word	0x10624dd3
 8005864:	fdffe008 	.word	0xfdffe008

08005868 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005870:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <SDMMC_GetCmdResp2+0x88>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <SDMMC_GetCmdResp2+0x8c>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	0a5b      	lsrs	r3, r3, #9
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1e5a      	subs	r2, r3, #1
 800588a:	60fa      	str	r2, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005894:	e026      	b.n	80058e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0ef      	beq.n	8005886 <SDMMC_GetCmdResp2+0x1e>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ea      	bne.n	8005886 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2204      	movs	r2, #4
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058c2:	2304      	movs	r3, #4
 80058c4:	e00e      	b.n	80058e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058d8:	2301      	movs	r3, #1
 80058da:	e003      	b.n	80058e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	22c5      	movs	r2, #197	; 0xc5
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000000 	.word	0x20000000
 80058f4:	10624dd3 	.word	0x10624dd3

080058f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <SDMMC_GetCmdResp3+0x74>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <SDMMC_GetCmdResp3+0x78>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	60fa      	str	r2, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005924:	e01b      	b.n	800595e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ef      	beq.n	8005916 <SDMMC_GetCmdResp3+0x1e>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ea      	bne.n	8005916 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2204      	movs	r2, #4
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005952:	2304      	movs	r3, #4
 8005954:	e003      	b.n	800595e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	22c5      	movs	r2, #197	; 0xc5
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000000 	.word	0x20000000
 8005970:	10624dd3 	.word	0x10624dd3

08005974 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	460b      	mov	r3, r1
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005982:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <SDMMC_GetCmdResp6+0xe4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a35      	ldr	r2, [pc, #212]	; (8005a5c <SDMMC_GetCmdResp6+0xe8>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1e5a      	subs	r2, r3, #1
 800599c:	61fa      	str	r2, [r7, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059a6:	e052      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ef      	beq.n	8005998 <SDMMC_GetCmdResp6+0x24>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1ea      	bne.n	8005998 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2204      	movs	r2, #4
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059d4:	2304      	movs	r3, #4
 80059d6:	e03a      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e02f      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fba0 	bl	8005134 <SDIO_GetCommandResponse>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d001      	beq.n	8005a02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e025      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	22c5      	movs	r2, #197	; 0xc5
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff fb9f 	bl	800514e <SDIO_GetResponse>
 8005a10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e011      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a38:	e009      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a48:	e001      	b.n	8005a4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3

08005a60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a68:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <SDMMC_GetCmdResp7+0x94>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <SDMMC_GetCmdResp7+0x98>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	0a5b      	lsrs	r3, r3, #9
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	60fa      	str	r2, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a8c:	e02c      	b.n	8005ae8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ef      	beq.n	8005a7e <SDMMC_GetCmdResp7+0x1e>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ea      	bne.n	8005a7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005aba:	2304      	movs	r3, #4
 8005abc:	e014      	b.n	8005ae8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e009      	b.n	8005ae8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2240      	movs	r2, #64	; 0x40
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ae6:	2300      	movs	r3, #0
  
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000000 	.word	0x20000000
 8005af8:	10624dd3 	.word	0x10624dd3

08005afc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005b00:	4904      	ldr	r1, [pc, #16]	; (8005b14 <MX_FATFS_Init+0x18>)
 8005b02:	4805      	ldr	r0, [pc, #20]	; (8005b18 <MX_FATFS_Init+0x1c>)
 8005b04:	f000 faa0 	bl	8006048 <FATFS_LinkDriver>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <MX_FATFS_Init+0x20>)
 8005b0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	200001cc 	.word	0x200001cc
 8005b18:	080060f8 	.word	0x080060f8
 8005b1c:	200001c8 	.word	0x200001c8

08005b20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005b2a:	f000 f896 	bl	8005c5a <BSP_SD_IsDetected>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e012      	b.n	8005b5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005b38:	480b      	ldr	r0, [pc, #44]	; (8005b68 <BSP_SD_Init+0x48>)
 8005b3a:	f7fd f8eb 	bl	8002d14 <HAL_SD_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b4c:	4806      	ldr	r0, [pc, #24]	; (8005b68 <BSP_SD_Init+0x48>)
 8005b4e:	f7fd fea1 	bl	8003894 <HAL_SD_ConfigWideBusOperation>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000140 	.word	0x20000140

08005b6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	68f9      	ldr	r1, [r7, #12]
 8005b82:	4806      	ldr	r0, [pc, #24]	; (8005b9c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005b84:	f7fd f974 	bl	8002e70 <HAL_SD_ReadBlocks_DMA>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000140 	.word	0x20000140

08005ba0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68f9      	ldr	r1, [r7, #12]
 8005bb6:	4806      	ldr	r0, [pc, #24]	; (8005bd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005bb8:	f7fd fa3a 	bl	8003030 <HAL_SD_WriteBlocks_DMA>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000140 	.word	0x20000140

08005bd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005bd8:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <BSP_SD_GetCardState+0x1c>)
 8005bda:	f7fd fef5 	bl	80039c8 <HAL_SD_GetCardState>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000140 	.word	0x20000140

08005bf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4803      	ldr	r0, [pc, #12]	; (8005c0c <BSP_SD_GetCardInfo+0x18>)
 8005c00:	f7fd fe1c 	bl	800383c <HAL_SD_GetCardInfo>
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000140 	.word	0x20000140

08005c10 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005c18:	f000 f818 	bl	8005c4c <BSP_SD_AbortCallback>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005c2c:	f000 f9a8 	bl	8005f80 <BSP_SD_WriteCpltCallback>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005c40:	f000 f9aa 	bl	8005f98 <BSP_SD_ReadCpltCallback>
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0

}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005c60:	2301      	movs	r3, #1
 8005c62:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005c64:	f000 f80c 	bl	8005c80 <BSP_PlatformIsDetected>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	b2db      	uxtb	r3, r3
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005c86:	2301      	movs	r3, #1
 8005c88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4806      	ldr	r0, [pc, #24]	; (8005ca8 <BSP_PlatformIsDetected+0x28>)
 8005c8e:	f7fb ff57 	bl	8001b40 <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40020800 	.word	0x40020800

08005cac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005cb4:	f7fb f860 	bl	8000d78 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005cba:	e006      	b.n	8005cca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005cbc:	f7ff ff8a 	bl	8005bd4 <BSP_SD_GetCardState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e009      	b.n	8005cde <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005cca:	f7fb f855 	bl	8000d78 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d8f0      	bhi.n	8005cbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <SD_CheckStatus+0x38>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005cf8:	f7ff ff6c 	bl	8005bd4 <BSP_SD_GetCardState>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d107      	bne.n	8005d12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <SD_CheckStatus+0x38>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <SD_CheckStatus+0x38>)
 8005d10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005d12:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <SD_CheckStatus+0x38>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b2db      	uxtb	r3, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000009 	.word	0x20000009

08005d24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005d2e:	f7ff fef7 	bl	8005b20 <BSP_SD_Init>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d107      	bne.n	8005d48 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ffd4 	bl	8005ce8 <SD_CheckStatus>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	4b04      	ldr	r3, [pc, #16]	; (8005d58 <SD_initialize+0x34>)
 8005d46:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <SD_initialize+0x34>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000009 	.word	0x20000009

08005d5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff ffbd 	bl	8005ce8 <SD_CheckStatus>
 8005d6e:	4603      	mov	r3, r0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005d8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8005d90:	f7ff ff8c 	bl	8005cac <SD_CheckStatusWithTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da01      	bge.n	8005d9e <SD_read+0x26>
  {
    return res;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	e03b      	b.n	8005e16 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	68b8      	ldr	r0, [r7, #8]
 8005da4:	f7ff fee2 	bl	8005b6c <BSP_SD_ReadBlocks_DMA>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d132      	bne.n	8005e14 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005dae:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <SD_read+0xa8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005db4:	f7fa ffe0 	bl	8000d78 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005dba:	bf00      	nop
 8005dbc:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <SD_read+0xa8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d108      	bne.n	8005dd6 <SD_read+0x5e>
 8005dc4:	f7fa ffd8 	bl	8000d78 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	f247 522f 	movw	r2, #29999	; 0x752f
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d9f2      	bls.n	8005dbc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <SD_read+0xa8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75fb      	strb	r3, [r7, #23]
 8005de2:	e017      	b.n	8005e14 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <SD_read+0xa8>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005dea:	f7fa ffc5 	bl	8000d78 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005df0:	e007      	b.n	8005e02 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005df2:	f7ff feef 	bl	8005bd4 <BSP_SD_GetCardState>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SD_read+0x8a>
          {
            res = RES_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005e00:	e008      	b.n	8005e14 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e02:	f7fa ffb9 	bl	8000d78 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d9ee      	bls.n	8005df2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	2000002c 	.word	0x2000002c

08005e24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005e38:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <SD_write+0xa8>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005e3e:	f247 5030 	movw	r0, #30000	; 0x7530
 8005e42:	f7ff ff33 	bl	8005cac <SD_CheckStatusWithTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da01      	bge.n	8005e50 <SD_write+0x2c>
  {
    return res;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	e038      	b.n	8005ec2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68b8      	ldr	r0, [r7, #8]
 8005e56:	f7ff fea3 	bl	8005ba0 <BSP_SD_WriteBlocks_DMA>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d12f      	bne.n	8005ec0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005e60:	f7fa ff8a 	bl	8000d78 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e66:	bf00      	nop
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <SD_write+0xa8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <SD_write+0x5e>
 8005e70:	f7fa ff82 	bl	8000d78 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f247 522f 	movw	r2, #29999	; 0x752f
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d9f2      	bls.n	8005e68 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <SD_write+0xa8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
 8005e8e:	e017      	b.n	8005ec0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <SD_write+0xa8>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005e96:	f7fa ff6f 	bl	8000d78 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e9c:	e007      	b.n	8005eae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005e9e:	f7ff fe99 	bl	8005bd4 <BSP_SD_GetCardState>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <SD_write+0x8a>
          {
            res = RES_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	75fb      	strb	r3, [r7, #23]
            break;
 8005eac:	e008      	b.n	8005ec0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005eae:	f7fa ff63 	bl	8000d78 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d9ee      	bls.n	8005e9e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000028 	.word	0x20000028

08005ed0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	; 0x30
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	603a      	str	r2, [r7, #0]
 8005eda:	71fb      	strb	r3, [r7, #7]
 8005edc:	460b      	mov	r3, r1
 8005ede:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ee6:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <SD_ioctl+0xac>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <SD_ioctl+0x28>
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e03c      	b.n	8005f72 <SD_ioctl+0xa2>

  switch (cmd)
 8005ef8:	79bb      	ldrb	r3, [r7, #6]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d834      	bhi.n	8005f68 <SD_ioctl+0x98>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <SD_ioctl+0x34>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005f1d 	.word	0x08005f1d
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f4f 	.word	0x08005f4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f1a:	e028      	b.n	8005f6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fe67 	bl	8005bf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f32:	e01c      	b.n	8005f6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fe5b 	bl	8005bf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f4c:	e00f      	b.n	8005f6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f4e:	f107 030c 	add.w	r3, r7, #12
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fe4e 	bl	8005bf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	0a5a      	lsrs	r2, r3, #9
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005f66:	e002      	b.n	8005f6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3730      	adds	r7, #48	; 0x30
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000009 	.word	0x20000009

08005f80 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <BSP_SD_WriteCpltCallback+0x14>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	20000028 	.word	0x20000028

08005f98 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <BSP_SD_ReadCpltCallback+0x14>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2000002c 	.word	0x2000002c

08005fb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005fc8:	7a5b      	ldrb	r3, [r3, #9]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d131      	bne.n	8006034 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005fd2:	7a5b      	ldrb	r3, [r3, #9]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005fe0:	7a5b      	ldrb	r3, [r3, #9]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	4a17      	ldr	r2, [pc, #92]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005ff0:	7a5b      	ldrb	r3, [r3, #9]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8005ff8:	4413      	add	r3, r2
 8005ffa:	79fa      	ldrb	r2, [r7, #7]
 8005ffc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 8006000:	7a5b      	ldrb	r3, [r3, #9]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	b2d1      	uxtb	r1, r2
 8006008:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <FATFS_LinkDriverEx+0x94>)
 800600a:	7251      	strb	r1, [r2, #9]
 800600c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800600e:	7dbb      	ldrb	r3, [r7, #22]
 8006010:	3330      	adds	r3, #48	; 0x30
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3301      	adds	r3, #1
 800601c:	223a      	movs	r2, #58	; 0x3a
 800601e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3302      	adds	r3, #2
 8006024:	222f      	movs	r2, #47	; 0x2f
 8006026:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3303      	adds	r3, #3
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000030 	.word	0x20000030

08006048 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006052:	2200      	movs	r2, #0
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ffaa 	bl	8005fb0 <FATFS_LinkDriverEx>
 800605c:	4603      	mov	r3, r0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 f820 	bl	80060c0 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08006114 	.word	0x08006114
 80060a4:	08006114 	.word	0x08006114
 80060a8:	08006114 	.word	0x08006114
 80060ac:	08006118 	.word	0x08006118

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
